<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PostSharp.Patterns.Common</name>
    </assembly>
    <members>
        <member name="T:PostSharp.Patterns.AssertionFailedException">
            <summary>
            Exception thrown upon internal assertion failures in PostSharp Pattern Libraries.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.AssertionFailedException.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.AssertionFailedException"/> with the default error message.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.AssertionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.AssertionFailedException"/> and specifies the error message.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.AssertionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.AssertionFailedException"/> and specifies the error message and the inner <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1">
            <summary>
            Base implementation of the  <see cref="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1"/> interface.
            </summary>
            <typeparam name="T">Type of collection items.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.#ctor(PostSharp.Patterns.DynamicAdvising.IQueryInterface)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1"/>.
            </summary>
            <param name="parent">The parent object.</param>
        </member>
        <member name="P:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.Collection">
            <summary>
            Gets the target <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.InsertItem(System.Int32,`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.RemoveItem(System.Int32,`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.SetItem(System.Int32,`0,`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.ClearItems(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.ToArray(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.MoveItem(`0,System.Int32,System.Int32,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.InsertMany(System.Int32,`0[],PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.RemoveMany(System.Int32,`0[],PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.IsReadOnly(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.CollectionDynamicAdvice`1.IsSynchronized(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase})">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2">
            <summary>
            Base implementation for dynamic advices added to an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of dictionary keys.</typeparam>
            <typeparam name="TValue">Type of dictionary values.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2.#ctor(PostSharp.Patterns.DynamicAdvising.IQueryInterface)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2"/>.
            </summary>
            <param name="parent">Parent object.</param>
        </member>
        <member name="P:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2.Dictionary">
            <summary>
            Gets the advised dictionary.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2.AddItem(`0,`1,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2.RemoveItem(`0,`1,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2.SetItem(`0,`1,`1,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2.ClearItems(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2.ToArray(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2.IsReadOnly(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase})">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.DictionaryDynamicAdvice`2.IsSynchronized(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase})">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1">
            <summary>
            An implementation of <see cref="T:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice`1"/> with default behavior (invokes the next advice in the chain).
            </summary>
            <typeparam name="T">Type of items in the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/></typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1.#ctor(PostSharp.Patterns.DynamicAdvising.IQueryInterface)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1"/>.
            </summary>
            <param name="parent">The parent object.</param>
        </member>
        <member name="P:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1.Set">
            <summary>
            Gets the parent <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1.AddItem(`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1.RemoveItem(`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1.ClearItems(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1.ChangeMany(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}},System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1.ToArray(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1.IsReadOnly(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.HashSetDynamicAdvice`1.IsSynchronized(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase})">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase">
            <summary>
            Base interface for all dynamic advices that apply to collection-like types.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase.IsReadOnly(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase})">
            <summary>
            Determines whether the advised collection is read-only.
            </summary>
            <param name="nextAdvices">The next advice in the chain of responsibility.</param>
            <returns><c>true</c> if the advised collection is read-only, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase.IsSynchronized(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceBase})">
            <summary>
            Determines whether the advised collection is synchronized (i.e. thread-safe).
            </summary>
            <param name="nextAdvices">The next advice in the chain of responsibility.</param>
            <returns><c>true</c> if the advised collection is synchronized (i.e. thread-safe), otherwise <c>false</c>.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1">
            <summary>
            Defines the semantics of a dynamic advice that can be applied to an <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </summary>
            <typeparam name="T">Type of collection items.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1.InsertItem(System.Int32,`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <summary>
            Inserts an item into the advised collection.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1.RemoveItem(System.Int32,`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <summary>
            Removes an item from the advised collection.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1.SetItem(System.Int32,`0,`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <summary>
            Replaces an item in the advised collection.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <param name="oldItem"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1.ClearItems(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <summary>
            Empties the advised collection.
            </summary>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1.ToArray(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <summary>
            Copies the advised collection into a new array.
            </summary>
            <param name="nextAdvices"></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1.MoveItem(`0,System.Int32,System.Int32,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <summary>
            Moves an item of the advised collection from an old index to a new index.
            </summary>
            <param name="item"></param>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1.InsertMany(System.Int32,`0[],PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <summary>
            Inserts several items to the advised collection.
            </summary>
            <param name="index"></param>
            <param name="itemsToAdd"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1.RemoveMany(System.Int32,`0[],PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice{`0}})">
            <summary>
            Removes several items from the advised collection.
            </summary>
            <param name="index"></param>
            <param name="itemsToRemove"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceFactory`1">
            <summary>
            Creates instances of the <see cref="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1"/> interface.
            </summary>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdviceFactory`1.Create(PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableCollection,`0)">
            <summary>
            Creates a new instance implementing  <see cref="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1"/>.
            </summary>
            <param name="collection">The collection being advised.</param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice`2">
            <summary>
            Defines the semantics of a dynamic advice that can be applied to an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of dictionary keys.</typeparam>
            <typeparam name="TValue">Type of dictionary values.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice`2.AddItem(`0,`1,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <summary>
            Adds an item to the dictionary.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice`2.SetItem(`0,`1,`1,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <summary>
            Replaces an item with another one in the dictionary.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="oldValue"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice`2.RemoveItem(`0,`1,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <summary>
            Removes an item from the dictionary.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice`2.ClearItems(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <summary>
            Empties the dictionary.
            </summary>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice`2.ToArray(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice{`0,`1}})">
            <summary>
            Copies the dictionary to an array of keys and values.
            </summary>
            <param name="nextAdvices"></param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdviceFactory`1">
            <summary>
            Creates instances of the <see cref="T:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice`2"/> interface.
            </summary>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdviceFactory`1.Create(PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableDictionary,`0)">
            <summary>
            Creates a new instance implementing  <see cref="T:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice`2"/>.
            </summary>
            <param name="dictionary">The dictionary being advised.</param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableCollection">
            <summary>
            Defines the semantics of a collection that can be advised dynamically.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableCollection.ItemType">
            <summary>
            Gets the type of items in the collection.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableHashSet">
            <summary>
            Defines the semantics of a collection that can be advised dynamically.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableHashSet.ItemType">
            <summary>
            Gets the type of items in the collection.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableDictionary">
            <summary>
            Defines the semantics of a dictionary that can be advised dynamically.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableDictionary.KeyType">
            <summary>
            Type of keys in the dictionary.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableDictionary.ValueType">
            <summary>
            Type of values in the dictionary.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice`1">
            <summary>
            Defines the semantics of a dynamic advice that can be applied to an <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/>.
            </summary>
            <typeparam name="T">Type of collection items.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice`1.AddItem(`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}})">
            <summary>
            Adds an item to the hash set.
            </summary>
            <param name="item"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice`1.RemoveItem(`0,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}})">
            <summary>
            Removes an item from the hash set.
            </summary>
            <param name="item"></param>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice`1.ClearItems(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}})">
            <summary>
            Removes all items from the hash set.
            </summary>
            <param name="nextAdvices"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice`1.ChangeMany(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}},System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            Adds and/or removes several items to or from the hash set.
            </summary>
            <param name="nextAdvices"></param>
            <param name="itemsToAdd"></param>
            <param name="itemsToRemove"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice`1.ToArray(PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice{`0}})">
            <summary>
            Copies the hash set to an array.
            </summary>
            <param name="nextAdvices"></param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdviceFactory`1">
            <summary>
            Factory for <see cref="T:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice`1"/> advices.
            </summary>
            <typeparam name="TPayload">Type of the advice payload.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdviceFactory`1.Create(PostSharp.Patterns.Collections.Advices.IDynamicallyAdvisableHashSet,`0)">
            <summary>
            Creates a new instance implementing  <see cref="T:PostSharp.Patterns.Collections.Advices.IHashSetDynamicAdvice`1"/>.
            </summary>
            <param name="hashSet">The collection being advised.</param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableCollection`1">
            <summary>
            A collection type similar to <see cref="T:System.Collections.ObjectModel.Collection`1"/>  into which advices can be injected dynamically. 
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <remarks>
                <para>The API of this class is compatible with the <see cref="T:System.Collections.ObjectModel.Collection`1"/> class. It provides some additions but preserves the same design and naming conventions.</para>
            <para>Classes that derive from <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/> can add functionalities by overriding protected methods or by defining new public methods. 
            New public methods wrap their logic in a call of the <see cref="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.ExecuteWithAdvices``2(PostSharp.Patterns.Model.ObjectAccessLevel,``1@)"/> method,
            which applies boundary aspects. Public methods can access the data structure thanks to protected methods, which have a name ending in <c>Item</c>, for instance <see cref="M:PostSharp.Patterns.Collections.AdvisableCollection`1.SetItem(System.Int32,`0)"/>.
            Public methods should not use other public methods of the class, as it may cause inconsistent invocation of advises and performance issues. Events (<see cref="E:PostSharp.Patterns.Collections.AdvisableCollection`1.PropertyChanged"/> and <see cref="E:PostSharp.Patterns.Collections.AdvisableCollection`1.CollectionChanged"/>(
            are buffered. Public methods must invoke <see cref="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RaiseEvents"/> to raise buffered events. </para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/> class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The initial collection capacity.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/> class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/> class that contains elements copied from the specified collection 
            and has sufficient capacity to accommodate the number of elements copied. 
            </summary>
            <param name="items">The collection whose elements are copied to the new <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetAdviceEnumerator">
            <summary>
            Gets an <see cref="T:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1"/> for the <see cref="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the underlying collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be <c>null</c> for reference types.</param>
            <remarks>
            <para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.InsertItems(System.Int32,`0[])">
            <summary>
            Inserts elements into the underlying collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="collection" /> should be inserted.</param>
            <param name="collection">The list of objects to insert. The values in the list can be <c>null</c> for reference types.</param>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the underlying collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RemoveItems(System.Int32,System.Int32)">
            <summary>
            Removes the specified number of elements starting at the specified index of the underlying collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <param name="count">The number of the elements to remove.</param>
            <returns>The list of elements that were removed.</returns>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetItem(System.Int32)">
            <summary>
            Gets the element at the specified index of the underlying collection.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <returns>The element value.</returns>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetCount">
            <summary>
            Gets the number of elements in the underlying collection.
            </summary>
            <returns>The number of elements in the collection.</returns>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index of the underlying collection.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be <c>null</c> for reference types.</param>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.MoveItem(`0,System.Int32,System.Int32)">
            <summary>
            Moves the element at the specified index to another index in the underlying collection.
            </summary>
            <param name="item">The element to be moved.</param>
            <param name="oldIndex">The old zero-based index of <paramref name="item" /> in the collection.</param>
            <param name="newIndex">The new zero-based index of <paramref name="item" /> in the collection.</param>
            <remarks>
                <para>Some redundancy is created by requiring both <paramref name="item" /> and <paramref name="oldIndex" />: this is intentional, for performance reasons.</para>
            </remarks>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.ClearItems">
            <summary>
            Removes all elements from the underlying collection.
            </summary>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.IndexOfItem(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire underlying collection.
            </summary>
            <param name="item">The object to locate in the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>. The value can be <c>null</c> for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </summary>
            <returns>
            An <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator"/> for the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator">
            <summary>
            Enumerates the elements of an <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            The collection itself cannot be <c>null</c>, but it can contain elements that are <c>null</c>, if type <typeparamref name="T"/> is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moved the element at the specified index to another index.
            </summary>
            <param name="oldIndex">The old zero-based index of the item to be moved.</param>
            <param name="newIndex">The new zero-based index of the item to be moved.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.ToArray">
            <summary>
            Creates an array from the current <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.Count">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.System#Collections#IList#IsFixedSize">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which the new elements should be inserted.
            </param>
            <param name="collection">
            The collection whose elements should be inserted into the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            The collection itself cannot be <c>null</c>, but it can contain elements that are <c>null</c>, if type <typeparamref name="T"/> is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than 0.</para>
            <para>-or-</para>
            <paramref name="index"/> is greater than <see cref="P:PostSharp.Patterns.Collections.AdvisableCollection`1.Count"/>
            </exception>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RaiseEvents">
            <summary>
            Raised the events that have been buffered.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than 0.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than 0.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </exception>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than 0.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than 0.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </exception>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableCollection`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="E:PostSharp.Patterns.Collections.AdvisableCollection`1.PropertyChanged">
            <summary>
            Event raised when the value of a property of the current object changes.
            </summary>
        </member>
        <member name="E:PostSharp.Patterns.Collections.AdvisableCollection`1.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableCollection`1.OnDeserialization(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2">
            <summary>
            An implementation of a <see cref="T:System.Collections.Generic.Dictionary`2"/> into which advices can be injected dynamically. The class also allows derived classes to add new behaviors by overriding methods,
            like the <see cref="T:System.Collections.ObjectModel.Collection`1"/> class does.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <remarks>
             <para>To learn how to extend this class, see the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/> class documentation,</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/> class
            that is empty, has the default initial capacity, and uses the default equality comparer for the key type. 
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the default equality comparer for the key type. 
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/>  whose elements are copied to the new <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> that is empty, has the default initial capacity, and uses the specified equality comparer for the key type.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/> class
            that is empty, has the specified initial capacity, and uses the default equality comparer for the key type. 
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />  can contain.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>  and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" /> that is empty, has a specified initial capacity, and uses the specified equality comparer for the key type.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <param name="capacity">The initial number of elements that the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2" />  can contain.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.GetAdviceEnumerator">
            <summary>
            Gets an <see cref="T:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1"/> for the <see cref="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.AddItem(`0,`1)">
            <summary>
            Adds an element into the underlying dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be <c>null</c> for reference types..</param>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.SetItem(`0,`1,`1)">
            <summary>
            Sets the value with the specified key in the underlying dictionary.
            </summary>
            <param name="key">The key of the element to add or replace.</param>
            <param name="value">The new value to assign to the key.</param>
            <param name="oldValue">The old value assigned to <paramref name="key" />, or <c>null</c> if there is currently no value assigned to <paramref name="key" />.</param>
            <remarks>
            <para>There is redundancy in requiring both <paramref name="key" /> and <paramref name="oldValue" />, but this redundancy is required for performance reason.
            </para>
            <para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.RemoveItem(`0)">
            <summary>
            Removes the value with the specific key from the underlying dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element was successfully found and removed, otherwise <c>false</c>. This method returns <c>false</c> if <paramref name="key" />
            if not found in the underlying dictionary. </returns>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ClearItems">
            <summary>
            Removes all keys and items from the underlying dictionary.
            </summary>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/> contains a specific value.
            </summary>
            
            <returns>
            <c>true</c> if the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/> contains an element with the specified value; otherwise, <c>false</c>.
            </returns>
            <param name="value">The value to locate in the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            The value can be <c>null</c> for reference types.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#IDictionary#Keys">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#IDictionary#Values">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.OnDeserialization(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            </summary>
            <returns>An <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator"/> structure for the current <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator">
            <summary>
            Enumerates the elements of an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection">
            <summary>
            Represents the collection of keys in an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection"/>.
            </summary>
            <returns>An <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator"/> structure for the current <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection">
            <summary>
            Represents the collection of values in an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection"/>.
            </summary>
            <returns>An <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator"/> structure for the current <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableHashSet`1">
            <summary>
            A collection type similar to <see cref="T:System.Collections.Generic.HashSet`1"/>  into which advices can be injected dynamically. 
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <remarks>
                <para>The API of this class is compatible with the <see cref="T:System.Collections.Generic.HashSet`1"/> class. It provides some additions but preserves the same design and naming conventions.</para>
            <para>Classes that derive from <see cref="T:System.Collections.Generic.HashSet`1"/> can add functionalities by overriding protected methods or by defining new public methods. 
            New public methods wrap their logic in a call of the <see cref="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.ExecuteWithAdvices``2(PostSharp.Patterns.Model.ObjectAccessLevel,``1@)"/> method,
            which applies boundary aspects. Public methods can access the data structure thanks to protected methods, which have a name ending in <c>Item</c>, for instance <see cref="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.AddItem(`0)"/>.
            Public methods should not use other public methods of the class, as it may cause inconsistent invocation of advises and performance issues.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> class that is empty and uses the default equality comparer for the set type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> class that uses the default equality comparer for the set type,
            contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new set.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> class that is empty and uses the specified equality comparer for the set type.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set,
            or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> implementation for the set type.
            </param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> class that uses the specified equality comparer for the set type,
            contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new set.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set,
            or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> implementation for the set type.
            </param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.GetAdviceEnumerator">
            <summary>
            Gets an <see cref="T:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1"/> for the <see cref="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.AddItem(`0)">
            <summary>
            Inserts an element into the underlying set.
            </summary>
            <param name="item">The object to insert. The value can be <c>null</c> for reference types.</param>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.RemoveItem(`0)">
            <summary>
            Removes an element from the underlying collection.
            </summary>
            <param name="item">The object to remove. The value can be <c>null</c> for reference types.</param>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.ClearItems">
            <summary>
            Removes all elements from the underlying set.
            </summary>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.ChangeManyItems(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            Modifies the underlying set by adding and removing the specified items.
            </summary>
            <param name="itemsToAdd">The objects to insert. The value can be <c>null</c> for reference types.</param>
            <param name="itemsToRemove">The objects to remove. The value can be <c>null</c> for reference types.</param>
            <remarks><para>
      <note>
        This method does not cause the advices to be executed. It should be invoked only from inside the scope of
        the <c>ExecuteWithAdvices</c> method.
      </note>
    </para></remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.Count">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.CopyTo(`0[])">
            <summary>
            Copies the elements of an <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> object to an array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> object. The array must have zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of elements of an <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> object to an array, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> object. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <param name="count">The number of elements to copy to <paramref name="array"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="arrayIndex"/> is less than 0.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than 0.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="arrayIndex"/> is greater than the length of the destination <paramref name="array"/>.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is greater than the available space from the <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</para>
            </exception>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Removes all elements that match the conditions defined by the specified predicate from a <see cref="T:System.Collections.Generic.HashSet`1"/> collection.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements that were removed from the <see cref="T:System.Collections.Generic.HashSet`1"/> collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <c>null</c>.</exception>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.TrimExcess">
            <summary>
            Sets the capacity of a <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> object to the actual number of elements it contains,
            rounded up to a nearby, implementation-specific value.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object that is used to determine equality for the values in the set.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object that is used to determine equality for the values in the set.
            </value>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.CreateSetComparer">
            <summary>
            Returns an <see cref="T:System.Collections.IEqualityComparer"/> object that can be used for equality testing of a <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEqualityComparer"/> object that can be used for deep equality testing of the <see cref="T:System.Collections.Generic.HashSet`1"/> object.
            </returns>
            <remarks>
            <para>
            The <see cref="T:System.Collections.IEqualityComparer"/> object checks for equality at only one level;
            however, you can chain together comparers at additional levels to perform deeper equality testing.
            </para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/>.
            </summary>
            <returns>
            An <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator"/> for the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/>.
            </returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator">
            <summary>
            Enumerator for the <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> class.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableHashSet`1.PostSharp#Patterns#Collections#Advices#IDynamicallyAdvisableHashSet#ItemType">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableHashSet`1.OnDeserialization(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableHashSet`1.HashSetEqualityComparer`1">
            <summary>
            Equality comparer for hashsets of hashsets.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2">
            <summary>
            Provides the abstract base class for a keyed collection, similar to <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/>,  into which advices can be injected dynamically. 
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of values in the collection.</typeparam>
            <remarks>
             <para>The API of this class is compatible with the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> class.</para>
             <para>To learn how to extend this class, see the <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/> class documentation.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2"/> class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2"/> class that is empty and has a specified initial capacity.
            </summary>
            <param name="capacity">The number of elements the collection can contain before it must be resized.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2"/> class that has a specified initial capacity and a given equality comparer and uses the specified equality comparer.
            </summary>
            <param name="capacity">The number of elements the collection can contain before it must be resized.</param>
            <param name="comparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>  generic interface to use when comparing keys, or <c>null</c> to use the default equality comparer for the type of the key.</param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.OnDeserialization(System.Object,System.Runtime.Serialization.SerializationInfo)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.GetKeyForItem(`1)">
            <summary>
            Extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.Comparer">
            <summary>
            Gets the generic equality comparer that is used to determine equality of keys in the collection.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.IndexOfItem(`1)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.InsertItem(System.Int32,`1)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.InsertItems(System.Int32,`1[])">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.RemoveItems(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.SetItem(System.Int32,`1)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.MoveItem(`1,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.Contains(`0)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="item">The key to locate in the collection.</param>
            <returns><c>true</c> if the collection contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key. 
            </summary>
            <param name="key">The key of the element.</param>
            <returns>The element whose key is <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the element whose key is <paramref name="key"/> is not present or when the key of the new value is not identical to the value of the <paramref name="key"/> parameter.</exception>
            <remarks>When setting this property, the key of the new value should be identical to the value of the <paramref name="key"/> parameter.</remarks>
        </member>
        <member name="M:PostSharp.Patterns.Collections.AdvisableKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the element with the specified key.
            </summary>
            <param name="key">The key of the element.</param>
            <param name="item">The element whose key is <paramref name="key"/> or <c>default</c> if such element is not present.</param>
            <returns><c>true</c> when the element whose key is <paramref name="key"/> is present, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.Extensions">
            <summary>
            Adds extension methods to the <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:System.Collections.Generic.IDictionary`2"/> interfaces.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Extensions.ToAdvisableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/>.
            </summary>
            <typeparam name="T">Type of collection items.</typeparam>
            <param name="collection">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or <c>null</c>.</param>
            <returns>A new <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/> containing all elements of <paramref name="collection"/>, or <c>null</c>
            if <paramref name="collection"/> is empty.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Extensions.ToAdvisableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/>.
            </summary>
            <typeparam name="T">Type of collection items.</typeparam>
            <param name="collection">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or <c>null</c>.</param>
            <returns>A new <see cref="T:PostSharp.Patterns.Collections.AdvisableHashSet`1"/> containing all elements of <paramref name="collection"/>, or <c>null</c>
            if <paramref name="collection"/> is empty.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Extensions.ToAdvisableDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IDictionary`2"/> into an <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of dictionary keys.</typeparam>
            <typeparam name="TValue">Type of dictionary values.</typeparam>
            <param name="dictionary">An <see cref="T:System.Collections.Generic.IDictionary`2"/>, or <c>null</c>.</param>
            <returns>A new <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/> containing all elements of <paramref name="dictionary"/>, or <c>null</c>
            if <paramref name="dictionary"/> is empty.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.Extensions.ToAdvisableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/> given a method returning the item key and a method returning the item value.
            </summary>
            <typeparam name="TItem">Type of items in the input collection.</typeparam>
            <typeparam name="TKey">Type of keys in the output dictionary.</typeparam>
            <typeparam name="TValue">Type of values in the output dictionary.</typeparam>
            <param name="collection">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or <c>null</c>.</param>
            <param name="getKeyFunc">A method returning the dictionary key given an item of the input collection.</param>
            <param name="getValueFunc">A method returning the dictionary value given an item of the input collection.</param>
            <returns>A new <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/> build from items of the input <paramref name="collection"/>, or <c>null</c> if <paramref name="collection"/>
            is <c>null</c>.
            </returns>
        </member>
        <member name="T:PostSharp.Patterns.Collections.ReadOnlyArray`1">
            <summary>
            Read-only array wrapper.
            </summary>
            <typeparam name="T">Type of array items.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.#ctor(`0[])">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Collections.ReadOnlyArray`1"/>.
            </summary>
            <param name="array">An array, or <c>null</c>.</param>
        </member>
        <member name="P:PostSharp.Patterns.Collections.ReadOnlyArray`1.IsNull">
            <summary>
            Determines whether the array is null.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Collections.ReadOnlyArray`1.Item(System.Int32)">
            <summary>
            Gets a specified element of the array.
            </summary>
            <param name="index">The element position.</param>
            <returns>The element at position <paramref name="index"/>.</returns>
        </member>
        <member name="P:PostSharp.Patterns.Collections.ReadOnlyArray`1.Length">
            <summary>
            Gets the array length.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.Equals(PostSharp.Patterns.Collections.ReadOnlyArray{`0})">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.op_Equality(PostSharp.Patterns.Collections.ReadOnlyArray{`0},PostSharp.Patterns.Collections.ReadOnlyArray{`0})">
            <summary>
            Determines whether two instances of the <see cref="T:PostSharp.Patterns.Collections.ReadOnlyArray`1"/> type are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Collections.ReadOnlyArray`1.op_Inequality(PostSharp.Patterns.Collections.ReadOnlyArray{`0},PostSharp.Patterns.Collections.ReadOnlyArray{`0})">
            <summary>
            Determines whether two instances of the <see cref="T:PostSharp.Patterns.Collections.ReadOnlyArray`1"/> type are different.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.ContractExceptionFactory">
            <summary>
            Base class for contract exception factories. Implements chain of responsibility between concrete exception factories.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.ContractExceptionFactory.#ctor(PostSharp.Patterns.Contracts.ContractExceptionFactory)">
            <summary>
            Initialized a new instance of <see cref="T:PostSharp.Patterns.Contracts.ContractExceptionFactory"/>.
            </summary>
            <param name="next">Next factory in chain.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.ContractExceptionFactory.CreateException(PostSharp.Patterns.Contracts.ContractExceptionInfo)">
            <summary>
            Creates the exception based on the contents of <see cref="T:PostSharp.Patterns.Contracts.ContractExceptionInfo"/>.
            </summary>
            <param name="exceptionInfo">Information to be used for the creation of the requested exception.</param>
            <returns>The requested exception</returns>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.ContractExceptionInfo">
            <summary>
            This class holds the information from which the <see cref="T:PostSharp.Patterns.Contracts.ContractExceptionFactory"/> should create the exception.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractExceptionInfo.ExceptionType">
            <summary>
            Type of the exception that should be created.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractExceptionInfo.Aspect">
            <summary>
            Aspect that requested the exception.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractExceptionInfo.Value">
            <summary>
            Value being assigned to the location.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractExceptionInfo.LocationName">
            <summary>
            Name of the location.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractExceptionInfo.LocationKind">
            <summary>
            Location kind.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractExceptionInfo.Context">
            <summary>
            The context of the location validation.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractExceptionInfo.MessageId">
            <summary>
            The id of the error message to be used in the exception message formatting.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractExceptionInfo.MessageArguments">
            <summary>
            Additional parameters to be used in the exception message formatting.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.ContractExceptionInfo.#ctor(System.Type,PostSharp.Patterns.Contracts.LocationContractAttribute,System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext,System.String,System.Object[])">
            <summary>
            Initializes the struct.
            </summary>
            <param name="exceptionType">Requested Type of the exception that should be created.</param>
            <param name="aspect">Aspect that requested the exception.</param>
            <param name="value">Value being assigned to the location.</param>
            <param name="locationName">Name of the location.</param>
            <param name="locationKind">Location kind.</param>
            <param name="context">The context of the location validation.</param>
            <param name="messageId">The id of the error message template to be used in the exception.</param>
            <param name="messageArguments">Any additional parameters to be used in the exception message formatting.</param>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider">
            <summary>
            Base class for contract error messages providers.
            </summary>
            <remarks>
             <para>
               An implementation would typically override the <see cref="M:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GetMessage(System.String)"/> method. This method returns a formatting
            string where first 4 parameters have a well-known signification:
              </para>
            <list type="table">
                <listheader>  
                    <term>Parameter</term>  
                    <description>Description</description>  
                 </listheader>  
               <item>  
                <term>{0}</term>  
                <description>Name of the declaration being validated (empty in case of return value).</description>  
                </item>  
               <item>  
                <term>{1}</term>  
                <description>Kind of the declaration being validated.</description>  
                </item>
               <item>  
                <term>{2}</term>  
                <description>Name and kind of the declaration being validated.</description>  
                </item>
               <item>  
                <term>{3}</term>  
                <description>The invalid value.</description>  
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.Current">
            <summary>
            Current instance of <see cref="T:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.#ctor(PostSharp.Patterns.Contracts.ContractLocalizedTextProvider)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider"/>.
            </summary>
            <param name="next">The next node in the chain of responsibility.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.FormatMessage(System.String,System.Object,System.String,PostSharp.Reflection.LocationKind,System.Object[])">
            <summary>
            Formats an error message with concrete values.
            </summary>
            <param name="errorMessage">Message to be formatted and passed into the created exception</param>
            <param name="value">Value assigned to the location.</param>
            <param name="locationName">Name of the location.</param>
            <param name="locationKind">Location kind.</param>
            <param name="additionalArguments">Optional arguments to be used in the message formatting</param>
            <returns>A string derived from <c>errorMessage</c>, where placeholders have been
            replaced by their concrete value.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GetFormattingStringArguments(System.Object,System.String,PostSharp.Reflection.LocationKind,System.Object[])">
            <summary>
            Returns an array of arguments that can be passed to the <see cref="M:System.String.Format(System.String,System.Object[])"/> method
            </summary>
            <param name="value">The incorrect value (passed, assigned or returned).</param>
            <param name="locationName">The name of the declaration being validated (or <c>null</c> if a return value is being validated).</param>
            <param name="locationKind">The kind of declaration being validated.</param>
            <param name="additionalArguments">Additional arguments appended to the array of arguments.</param>
            <returns>An array of arguments that can be passed to the <see cref="M:System.String.Format(System.String,System.Object[])"/> method,
            where the formatting strings can have parameters as described in the remarks of
            the documentation of the <see cref="T:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider"/> class.</returns>
            <remarks>
             <para></para>
            </remarks>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.CreditCardErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.CreditCardAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.EmailAddressErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.EmailAddressAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.EnumDataTypeErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.EnumDataTypeAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GreaterThanErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.LessThanErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.LessThanAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.LocationContractErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.NotEmptyErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.NotEmptyAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.NotNullErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.NotNullAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.PhoneErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.PhoneAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.RangeErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.RangeAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StrictRangeErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.RangeAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.RegularExpressionErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.RegularExpressionAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.RequiredErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.RequiredAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StrictlyGreaterThanErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StrictlyLessThanErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StringLengthMinErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute"/> constraint is violated (only minimum length was specified).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StringLengthMaxErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute"/> constraint is violated (only maximum length was specified).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StringLengthRangeErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute"/> constraint is violated (both minimum and maximum was specified).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.UrlErrorMessage">
            <summary>
            Identifier of the error message shown when <see cref="T:PostSharp.Patterns.Contracts.UrlAttribute"/> constraint is violated.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GetFormattedMessage(PostSharp.Patterns.Contracts.ContractExceptionInfo)">
            <summary>
            Gets a message template using <see cref="M:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GetMessage(System.String)"/> and formats it using the values in exceptionInfo.
            </summary>
            <param name="exceptionInfo">Information about the exception to be created.</param>
            <returns>A formatted message that uses the formatting parameters described in the remarks of
            the documentation of the <see cref="T:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider"/> class.
            </returns>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GetMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.ContractServices">
            <summary>
            This class provides services supporting Contract aspects. By adding your own classes to the ExceptionFactory chain, you can change the way the
            exceptions are created when a contract is broken. By plugging into the LocalizedTextProvider chain, you can change the way the exception messages
            are generated. See the documentation for the classes for more details: <see cref="T:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider"/>, <see cref="T:PostSharp.Patterns.Contracts.ContractExceptionFactory"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractServices.LocalizedTextProvider">
            <summary>
            Gets the head of the ContractLocalizedTextProvider responsibility chain.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Contracts.ContractServices.DefaultExceptionFactory">
            <summary>
            The default exception factory is kept for the handling of the obsolete exception creation methods in LocationContractAttribute.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.ContractServices.ExceptionFactory">
            <summary>
            Gets the head of the ContractExceptionFactory responsibility chain.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.CreditCardAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException"/> if the target is assigned a value that
            is not a valid credit card number. Null strings are accepted and do not
            throw an exception.
            </summary>
            <remarks>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.CreditCardErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.CreditCardAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.CreditCardAttribute"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.CreditCardAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.CreditCardAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.CreditCardAttribute.ValidateValue(System.String,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.DefaultContractExceptionFactory">
            <summary>
            Default implementation of <see cref="T:PostSharp.Patterns.Contracts.ContractExceptionFactory"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.DefaultContractExceptionFactory.#ctor">
            <summary>
            Initializes an instance of <see cref="T:PostSharp.Patterns.Contracts.DefaultContractExceptionFactory"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.DefaultContractExceptionFactory.#ctor(PostSharp.Patterns.Contracts.ContractExceptionFactory)">
            <summary>
            Initializes an instance of <see cref="T:PostSharp.Patterns.Contracts.DefaultContractExceptionFactory"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.DefaultContractExceptionFactory.CreateException(PostSharp.Patterns.Contracts.ContractExceptionInfo)">
            <inheritdoc cref="T:PostSharp.Patterns.Contracts.ContractExceptionFactory"/>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.EmailAddressAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException"/> if the target is assigned a value that
            is not a valid email address. Null strings are accepted and do not
            throw an exception.
            </summary>
            <remarks>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.EmailAddressErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EmailAddressAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.EmailAddressAttribute"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EmailAddressAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.EnumDataTypeAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException"/> if the target is assigned a value that
            is not a valid member of an enumeration. 
            </summary>
            <remarks>
                <para>Strings are matched against enumeration member names. Integers
            are matched against enumeration member values.     Null values are accepted and do not
            throw exception.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.EnumDataTypeErrorMessage"/>.</para>
            <para>Error message can use additional argument <value>{4}</value> to refer to <see cref="P:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.EnumType"/> name.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.EnumDataTypeAttribute"/>.
            </summary>
            <param name="enumType">Enumeration type.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.EnumType">
            <summary>
            Gets the enumeration type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValueString(System.String,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Nullable{System.Int64},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Nullable{System.UInt64},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Nullable{System.Int32},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Nullable{System.UInt32},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Nullable{System.Int16},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Nullable{System.Byte},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Nullable{System.SByte},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Nullable{System.UInt16},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Int64,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.UInt64,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Int32,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.UInt32,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Int16,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.Byte,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.SByte,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.EnumDataTypeAttribute.ValidateValue(System.UInt16,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.GreaterThanAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value that
            is smaller than a given value.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GreaterThanErrorMessage"/>.</para>
            <para>Error message can use additional argument <value>{4}</value> to refer to the minimum value used.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute"/> with a given integer bound.
            </summary>
            <param name="min">The lower bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.#ctor(System.UInt64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute"/> with a given <see cref="T:System.UInt64"/> bound.
            </summary>
            <param name="min">The lower bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute"/> with a given floating-point bound.
            </summary>
            <param name="min">The lower bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.CreateException(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheridoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.GreaterThanAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.ILocationValidationHandler">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.ILocationValidationHandler.Register(PostSharp.Reflection.LocationInfo,PostSharp.Patterns.Contracts.LocationContractAttribute)">
            <exclude/>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.LessThanAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value that
            is greater than a given value.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.</para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.LessThanErrorMessage"/>.</para>
            <para>Error message can use additional argument <value>{4}</value> to refer to the minimum value used.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.LessThanAttribute"/> with a given integer bound.
            </summary>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.#ctor(System.UInt64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.LessThanAttribute"/> with a given <see cref="T:System.UInt64"/> bound.
            </summary>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.LessThanAttribute"/> with a given floating-point bound.
            </summary>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.CreateException(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheridoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LessThanAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.LocationContractAttribute">
            <summary>
            Base class for other custom attributes in this namespace.
            </summary>
            <remarks>
            <para>Basic error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.LocationContractErrorMessage"/> and 
            obtained from the provider set in <see cref="P:PostSharp.Patterns.Contracts.ContractServices.LocalizedTextProvider"/>. </para>
            <para>All formatting strings have the following parameters replaced:</para>
            <list type="bullet">
                <item><description>
                    <c>{0}</c> is replaced by the location name.
                </description></item>
                <item><description>
                    <c>{1}</c> is replaced by the location kind.
                </description></item>
                <item><description>
                    <c>{2}</c> is replaced by a string containing both location kind and name.
                </description></item>
                <item><description>
                    <c>{3}</c> is replaced by the value which caused the error when being assigned to the location.
                </description></item>
                <item><description>
                    Further parameters are described in the remarks sections of contracts which override the <see cref="M:PostSharp.Patterns.Contracts.LocationContractAttribute.GetErrorMessageArguments"/> method.
                </description></item>
            </list>
            <para>Note that an array of error message arguments is cached for each location.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CompileTimeValidate(PostSharp.Reflection.LocationInfo)">
            <summary>
            Validates that the current aspect has been applied to a valid location.
            </summary>
            <param name="target">The location to which the current aspect has been applied.</param>
            <returns><c>true</c> if <paramref name="target"/> is a valid target for the current aspect, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.SelectSelfOrNothing(PostSharp.Reflection.LocationInfo)">
            <summary>
            A pointcut that selects the target location of the current aspect, unless the target location is a dependency property or an attached property.
            </summary>
            <param name="target">The target location.</param>
            <returns>The target location, or nothing if the target location is a dependency property or an attached property.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.RuntimeInitialize(PostSharp.Reflection.LocationInfo)">
            <summary>
            Initializes the aspect at runtime.
            </summary>
            <param name="locationInfo">Target if the aspect.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <summary>
            Validates a weakly-typed (boxed) value, typically the value of a dependency property or an attached property.
            </summary>
            <param name="value">Value.</param>
            <param name="locationName">The name of the property.</param>
            <param name="locationKind">The kind of location (typically a <see cref="F:PostSharp.Reflection.LocationKind.Property"/>).</param>
            <param name="context">Why or when the value is being validated.</param>
            <returns>An <see cref="T:System.Exception"/> if the value is invalid, or <c>null</c> if the value is valid.</returns>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage">
            <summary>
            Gets or sets the error message formatting string.
            </summary>
            <remarks>
            <para>See remarks on <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute"/> for information about message parameters.</para>
            <para>If the value of this property is set to <value>null</value>, <see cref="M:PostSharp.Patterns.Contracts.LocationContractAttribute.GetErrorMessage"/> will be used to obtain the error message.</para>
            <para>Set this property only for legacy purposes. Otherwise, use <see cref="M:PostSharp.Patterns.Contracts.LocationContractAttribute.GetErrorMessage"/> method.</para>
            </remarks>       
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.GetErrorMessageArguments">
            <summary>
            Gets values of additional arguments for error message associated with particular instance of <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute"/>. 
            There arguments can be referenced from error message string by <c>{4}</c>, <c>{5}</c> and so on.
            </summary>
            <returns>An array of additional argument values.</returns>
            <remarks>
            This method is expected to be pure, i.e. it's result can be cached and so the implementer should not return information that may change
            after constructor of the class has finished.
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.GetErrorMessage">
            <summary>
            Gets unformatted error message as defined by the instance.
            </summary>
            <returns></returns>
            <remarks>
            <para>See remarks on <see cref="T:PostSharp.Patterns.Contracts.LocationContractAttribute"/> for information about message parameters.</para>
            <para>Use of this method can be overridden by setting <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage" /> property to non-null value.</para>
            </remarks>  
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.FormatErrorMessage(System.Object,System.String,PostSharp.Reflection.LocationKind)">
            <summary>
            Formats the <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/> with concrete values.
            </summary>
            <param name="value">Value assigned to the location.</param>
            <param name="locationName">Name of the location.</param>
            <param name="locationKind">Location kind.</param>
            <returns>A string derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/>, where placeholders have been
            replaced by their concrete value.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CreateArgumentException(System.Object,System.String,PostSharp.Reflection.LocationKind)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with an error message formatted from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/> and
            given concrete values.
            </summary>
            <param name="value">Value assigned to the location.</param>
            <param name="locationName">Name of the location.</param>
            <param name="locationKind">Location kind.</param>
            <returns>A new <see cref="T:System.ArgumentException"/> where the message, has been derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/>, with placeholders replaced by their concrete value. </returns>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CreateArgumentNullException(System.Object,System.String,PostSharp.Reflection.LocationKind)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with an error message formatted from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/> and
            given concrete values.
            </summary>
            <param name="value">Value assigned to the location.</param>
            <param name="locationName">Name of the location.</param>
            <param name="locationKind">Location kind.</param>
            <returns>A new <see cref="T:System.ArgumentNullException"/> where the message, has been derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/>, with placeholders replaced by their concrete value. </returns>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CreateArgumentOutOfRangeException(System.Object,System.String,PostSharp.Reflection.LocationKind)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with an error message formatted from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/> and
            given concrete values.
            </summary>
            <param name="value">Value assigned to the location.</param>
            <param name="locationName">Name of the location.</param>
            <param name="locationKind">Location kind.</param>
            <returns>A new <see cref="T:System.ArgumentOutOfRangeException"/> where the message, has been derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/>, with placeholders replaced by their concrete value. </returns>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.LocationContractAttribute.CreatePostconditionFailedException(System.Object,System.String,PostSharp.Reflection.LocationKind)">
            <summary>
            Creates an <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException"/> with an error message formatted from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/> and
            given concrete values.
            </summary>
            <param name="value">Value assigned to the location.</param>
            <param name="locationName">Name of the location.</param>
            <param name="locationKind">Location kind.</param>
            <returns>A new <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException"/> where the message, has been derived from <see cref="P:PostSharp.Patterns.Contracts.LocationContractAttribute.ErrorMessage"/>, with placeholders replaced by their concrete value. </returns>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.NegativeAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value
            greater than zero.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.LessThanErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NegativeAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.NegativeAttribute"/>.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.NotEmptyAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentNullException"/> if the target is assigned a null or empty value.
            The custom attributes can be added to locations of type <see cref="T:System.String"/> (where empty
            means zero characters), or <see cref="T:System.Collections.ICollection"/>, <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>  (where empty means zero items). 
            </summary>
            <remarks>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.NotEmptyErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotEmptyAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.NotEmptyAttribute"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotEmptyAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueString(System.String,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueCollection(System.Collections.ICollection,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueCollection``1(System.Collections.Generic.ICollection{``0},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotEmptyAttribute.ValidateValueCollection``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.NotNullAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentNullException"/> if the target is assigned a null value.
            </summary>
            <remarks>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.NotNullErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotNullAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotNullAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.NotNullAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.PhoneAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException"/> if the target is assigned a value that
            is not a valid phone number. Null strings are accepted and do not
            throw an exception.
            </summary>
            <remarks>
            <para>Error message is identified by <see cref="T:PostSharp.Patterns.Contracts.PhoneAttribute"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.PhoneAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.PhoneAttribute"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.PhoneAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.PhoneAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.PositiveAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value
            smaller than zero.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GreaterThanErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.PositiveAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.PositiveAttribute"/>.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.PostconditionFailedException">
            <summary>
            The exception that is thrown when a postcondition contract was not fulfilled by a method.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.PostconditionFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException"/> class.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.PostconditionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException"/> class with a specified error message.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.PostconditionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.PostconditionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Contracts.PostconditionFailedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.RangeAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value that
            is outside a given range.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.RangeErrorMessage"/>.</para>
            <para>Error message can use additional argument <value>{4}</value> to refer to the minimum value used and <value>{5}</value> to refer to the maximum value used.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.RangeAttribute.DisplayMinValue">
            <summary>
            Gets the minimal value to be used when generating the error message, typically in the implementation of <see cref="M:PostSharp.Patterns.Contracts.RangeAttribute.GetErrorMessageArguments"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.RangeAttribute.DisplayMaxValue">
            <summary>
            Gets the maximal value to be used when generating the error message, typically in the implementation of <see cref="M:PostSharp.Patterns.Contracts.RangeAttribute.GetErrorMessageArguments"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute"/> and specify an integer bound.
            </summary>
            <param name="min">The lower bound.</param>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute"/> and specify a <see cref="T:System.UInt64"/> bound.
            </summary>
            <param name="min">The lower bound.</param>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.GreaterThanAttribute"/> and specify a floating-point bound.
            </summary>
            <param name="min">The lower bound.</param>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.Int64},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.Double},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.Decimal},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.UInt64},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Int64,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.UInt64,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Double,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Decimal,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.Int32},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.UInt32},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.Int16},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.Byte},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.SByte},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.UInt16},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Nullable{System.Single},System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValueInt(System.Int32,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.UInt32,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Int16,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Byte,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.SByte,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.UInt16,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.ValidateValue(System.Single,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.CreateException(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheridoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RangeAttribute.CompileTimeValidate(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.RegularExpressionAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException"/> if the target is assigned a value that
            does not match a given regular expression. Null strings are accepted and do not
            throw an exception.
            </summary>
            <remarks>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.RegularExpressionErrorMessage"/>.</para>
            <para>Error message can use additional argument <value>{4}</value> to refer to the regular expression used.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.RegularExpressionAttribute"/>.
            </summary>
            <param name="pattern">The regular expression.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.RegularExpressionAttribute"/> and specify options.
            </summary>
            <param name="pattern">The regular expression.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RegularExpressionAttribute.ValidateValue(System.String,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.RequiredAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws:
            <list type="bullet">
                <item><description>
                    an <see cref="T:System.ArgumentNullException"/> if the target is assigned a null value;
                </description></item>
                <item><description>
                    an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned an empty or white-space string.
                </description></item>
            </list>
            </summary>
            <remarks>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.RequiredErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RequiredAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.RequiredAttribute"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RequiredAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueObject(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.RequiredAttribute.ValidateValueString(System.String,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value that
            is smaller than or equal to a given value.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.
            </para>
            <para>
                Floating-point values are tested to be greater than or equal to the minimum value
                plus a tolerance value. The tolerance value is equal to the distance
                of the value closest to the minimum value according to the precision
                of the respective floating-point numerical data type.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StrictlyGreaterThanErrorMessage"/>.</para>
            <para>Error message can use additional argument <value>{4}</value> to refer to the minimum value used.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute"/> with a given integer bound.
            </summary>
            <param name="min">The lower bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.#ctor(System.UInt64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute"/> with a given <see cref="T:System.UInt64"/> bound.
            </summary>
            <param name="min">The lower bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute"/> with a given floating-point bound.
            </summary>
            <param name="min">The lower bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.CreateException(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheridoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyGreaterThanAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value that
            is greater than or equal to a given value.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.
            </para>
            <para>
                Floating-point values are tested to be greater than or equal to the maximum value
                plus a tolerance value. The tolerance value is equal to the distance
                of the value closest to the maximum value according to the precision
                of the respective floating-point numerical data type.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StrictlyLessThanErrorMessage"/>.</para>
            <para>Error message can use additional argument <value>{4}</value> to refer to the minimum value used.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute"/> with a given integer bound.
            </summary>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.#ctor(System.UInt64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute"/> with a given <see cref="T:System.UInt64"/> bound.
            </summary>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute"/> with a given floating-point bound.
            </summary>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.CreateException(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheridoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyLessThanAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.StrictlyNegativeAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value
            greater than or equal to zero.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.LessThanErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyNegativeAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyNegativeAttribute"/>.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.StrictlyPositiveAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value
            smaller than or equal to zero.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.GreaterThanErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictlyPositiveAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictlyPositiveAttribute"/>.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.StrictRangeAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentOutOfRangeException"/> if the target is assigned a value that
            is not strictly within the given range.
            </summary>
            <remarks>
                <para>Null values are accepted and do not throw an exception.
            </para>
            <para>
                Floating-point values are tested to be strictly within the given bounds
                with a tolerance value. The tolerance value is equal to the distance
                of the value closest to the bounds according to the precision
                of the respective floating-point numerical data type.
            </para>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StrictRangeErrorMessage"/>.</para>
            <para>Error message can use additional arguments <value>{4}</value> and <value>{5}</value> to refer to the bounds.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictRangeAttribute.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictRangeAttribute"/> with given integer bounds.
            </summary>
            <param name="min">The lower bound.</param>
            <param name="max">The lower bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictRangeAttribute.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictRangeAttribute"/> with given <see cref="T:System.UInt64"/> bounds.
            </summary>
            <param name="min">The lower bound.</param>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictRangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StrictRangeAttribute"/> with given floating-point bounds.
            </summary>
            <param name="min">The lower bound.</param>
            <param name="max">The upper bound.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictRangeAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StrictRangeAttribute.CreateException(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheridoc />
        </member>
        <member name="T:PostSharp.Patterns.Contracts.StringLengthAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException"/> if the target is assigned a string of invalid length.
            Null strings are accepted and do not throw an exception.
            </summary>
            <remarks>
            <para>Depending on supplied constructor arguments, one of the following holds:
            <list type="bullet">
                <item><description>
                    if there is no minimum specified, then the error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StringLengthMaxErrorMessage"/>
                    and can use additional argument <value>{4}</value> to refer to the maximum value specified,
                </description></item>
                <item><description>
                    or if there is maximum is equal to <see cref="F:System.Int32.MaxValue"/>, then the error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StringLengthMinErrorMessage"/>
                    and can use additional argument <value>{4}</value> to refer to the minimum value specified,
                </description></item>
                <item><description>
                    otherwise, the error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.StringLengthRangeErrorMessage"/>
                    and can use additional arguments <value>{4}</value> to refer to the minimum value specified and <value>{5}</value> to refer to the maximum value specified.
                </description></item>
            </list></para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StringLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute"/> and specifies the maximum length.
            </summary>
            <param name="maximumLength">Maximum length.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StringLengthAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.StringLengthAttribute"/> and specifies the maximum  length
            and the minimum length.
            </summary>
            <param name="maximumLength">Maximum length.</param>
            <param name="minimumLength">Minimum length.</param>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StringLengthAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StringLengthAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Contracts.StringLengthAttribute.MaximumLength">
            <summary>
            Gets the maximum length.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Contracts.StringLengthAttribute.MinimumLength">
            <summary>
            Gets the minimum length.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StringLengthAttribute.ValidateValueDynamic(System.Object,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.StringLengthAttribute.ValidateValue(System.String,System.String,PostSharp.Reflection.LocationKind,PostSharp.Aspects.LocationValidationContext)">
            <exclude/>
        </member>
        <member name="T:PostSharp.Patterns.Contracts.UrlAttribute">
            <summary>
            Custom attribute that, when added to a field, property or parameter, throws
            an <see cref="T:System.ArgumentException"/> if the target is assigned a value that
            is not a valid URL starting with <c>http://</c>, <c>https://</c> or <c>ftp://</c>.
             Null strings are accepted and do not
            throw an exception.
            </summary>
            <remarks>
            <para>Error message is identified by <see cref="F:PostSharp.Patterns.Contracts.ContractLocalizedTextProvider.UrlErrorMessage"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.UrlAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Contracts.UrlAttribute"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Contracts.UrlAttribute.GetErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Contracts.UrlAttribute.GetErrorMessageArguments">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnEntry(PostSharp.Aspects.AsyncCallId)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnSuspend(PostSharp.Aspects.AsyncCallId)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnResume(PostSharp.Aspects.AsyncCallId)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.AwaitInstrumentationAspect.OnExit(PostSharp.Aspects.AsyncCallId)">
            <exclude/>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.CloseActivityOptions">
            <summary>
            Options of the closing methods of the <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity`1"/> type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.CloseActivityOptions.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.CloseActivityOptions"/> and specifies properties using an arbitrary object 
            (possibly of an anonymous class).
            </summary>
            <param name="data">Optional. Specifies the properties of the <see cref="T:PostSharp.Patterns.Diagnostics.WriteMessageOptions"/>, typically specified as an instance of a well-known or anonymous CLR type.
            The resulting <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> will have the default <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>, which means that all CLR properties will be exposed
            as logging properties  unless they are annotated with <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptionsAttribute"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.CloseActivityOptions.#ctor(PostSharp.Patterns.Diagnostics.Custom.LogEventData@)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.CloseActivityOptions"/> and specifies properties using a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.
            </summary>
            <param name="data">Optional. Specifies the properties of the <see cref="T:PostSharp.Patterns.Diagnostics.WriteMessageOptions"/>. See <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.</param>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.CloseActivityOptions.Properties">
            <summary>
            Gets the activity properties. 
            </summary>
            <summary>
            Gets or sets the activity properties.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.CloseActivityOptions.Data">
            <summary>
            Specifies the properties of the <see cref="T:PostSharp.Patterns.Diagnostics.CloseActivityOptions"/>, typically specified as an instance of a well-known or anonymous CLR type.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Contexts.CallerAttributes">
            <summary>
            Possible values of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.Attributes"/> property.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Contexts.CallerAttributes.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Contexts.CallerAttributes.IsAsync">
            <summary>
            Determines whether the caller is an <c>async</c> method.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo">
            <summary>
            Represents information about the caller of the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.#ctor(System.RuntimeTypeHandle,System.String,System.String,System.Int32,System.Int32)">
            <excludeOverload/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.#ctor(System.RuntimeTypeHandle,System.String,System.String,System.Int32,System.Int32,PostSharp.Patterns.Diagnostics.Contexts.CallerAttributes)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo"/>, and uses as a <see cref="T:System.RuntimeTypeHandle"/> to specify the source type.
            </summary>
            <param name="sourceTypeToken"><see cref="T:System.RuntimeTypeHandle"/> of the calling type.</param>
            <param name="methodName">Name of the calling method.</param>
            <param name="file">Path of the source code of the calling code.</param>
            <param name="line">Line in <paramref name="file"/> of the caller.</param>
            <param name="column">Column in <paramref name="file"/> of the caller.</param>
            <param name="attributes">Attributes.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.#ctor(System.Type,System.String,System.String,System.Int32,System.Int32)">
            <excludeOverload/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.#ctor(System.Type,System.String,System.String,System.Int32,System.Int32,PostSharp.Patterns.Diagnostics.Contexts.CallerAttributes)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo"/>, and uses as a <see cref="T:System.Type"/> to specify the source type.
            </summary>
            <param name="sourceType"><see cref="T:System.Type"/> of the calling type.</param>
            <param name="methodName">Name of the calling method.</param>
            <param name="file">Path of the source code of the calling code.</param>
            <param name="line">Line in <paramref name="file"/> of the caller.</param>
            <param name="column">Column in <paramref name="file"/> of the caller.</param>
            <param name="attributes">Attributes.</param>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.Attributes">
            <summary>
            Gets the caller attributes.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.IsAsync">
            <summary>
            Determines whether the caller is an <c>async</c> method.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.SourceType">
            <summary>
            Gets the source <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.SourceTypeToken">
            <summary>
            Gets the <see cref="T:System.RuntimeTypeHandle"/> of the caller <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.MethodName">
            <summary>
            Gets the name of the caller method.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.SourceLineInfo">
            <summary>
            Gets the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.SourceLineInfo"/> of the caller.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.IsNull">
            <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo"/> is null.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo.GetDynamic(System.Int32)">
            <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo"/> of the caller by performing a stack walk (using <see cref="T:System.Diagnostics.StackFrame"/>).
            </summary>
            <param name="skipFrames">The number of stack frames to skip.</param>
            <returns> A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo"/> for the caller (skipping the specified number of stack frames), or <c>default</c> if the platform does not support the <see cref="T:System.Diagnostics.StackFrame"/> class.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext">
            <summary>
            Defines the minimal semantics of a logging context required by the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.IsDisposed">
            <summary>
            Determines whether the context is currently disposed (contexts can be recycled, therefore the
            disposed state is not the final state).
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.RecycleId">
            <summary>
            Gets an integer that is incremented every time the current instance is being recycled.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.IsAsync">
            <summary>
            Determines whether the context represents an <c>async</c> method or a custom activity in an <c>async</c> method.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.SyntheticId">
            <summary>
            Gets a cross-process globally unique identifier for the current context.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.ForEachProperty(PostSharp.Patterns.Diagnostics.Contexts.LoggingPropertyVisitor{System.Object},System.Boolean)">
            <summary>
            Invokes a delegate for each property defined in the current logging context and optionally in its ancestor contexts.
            </summary>
            <param name="visitor">The delegate to invoke. The <c>state</c> parameter of the delegate will be assigned to a dummy variable.</param>
            <param name="includeAncestors"><c>true</c> if ancestor contexts should be visited, <c>false</c> if only the current context should be visited.</param>
            <remarks>
            <para>This method will visit all properties regardless of their name. If several properties have the same name, they will be visited several times.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.ForEachProperty``1(PostSharp.Patterns.Diagnostics.Contexts.LoggingPropertyVisitor{``0},``0@,System.Boolean)">
            <summary>
            Invokes a delegate for each property defined in the current logging context and optionally in its ancestor contexts, and specifies passes a state object
            to the delegate.
            </summary>
            <param name="visitor">The delegate to invoke. The <c>state</c> parameter of the delegate will be assigned to a dummy variable.</param>
            <param name="includeAncestors"><c>true</c> if ancestor contexts should be visited, <c>false</c> if only the current context should be visited.</param>
            <param name="state">Some state that will be passed to the <paramref name="visitor"/> delegate.</param>
            <typeparam name="T">Type of the state passed to the <paramref name="visitor"/> delegate.</typeparam>
            <remarks>
            <para>This method will visit all properties regardless of their name. If several properties have the same name, they will be visited several times.</para>
            </remarks>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingPropertyVisitor`1">
            <summary>
            Delegate invoked by the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.ForEachProperty``1(PostSharp.Patterns.Diagnostics.Contexts.LoggingPropertyVisitor{``0},``0@,System.Boolean)"/> method.
            </summary>
            <param name="property">The visited <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProperty"/>.</param>
            <param name="value">The evaluated value of the property. Will not be <c>null</c> because null properties are ignored. </param>
            <param name="state">The value passed to the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.ForEachProperty``1(PostSharp.Patterns.Diagnostics.Contexts.LoggingPropertyVisitor{``0},``0@,System.Boolean)"/> method.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo">
            <summary>
            Represents a position in a file of source code.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo"/>.
            </summary>
            <param name="file">Path to the source code file.</param>
            <param name="line">Line in <paramref name="file"/>.</param>
            <param name="column">Column in <paramref name="file"/>.</param>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.File">
            <summary>
            Gets the path to the source code file.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.Line">
            <summary>
            Gets the line in <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.File"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.Column">
            <summary>
            Gets the column in <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.File"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo.IsNull">
            <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo"/> is null.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Correlation.IncomingRequestOptions">
            <summary>
            Logging options sent by the caller in a distributed logging transaction.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Correlation.IncomingRequestOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Correlation.IncomingRequestOptions"/>.
            </summary>
            <param name="isParentSampled">Determines whether the parent request was logged as a result of sampling,
            i.e. it was logged by a policy that had a sampling clause. It corresponds
            to the <c>sampled</c> flag of the W3C Trace Context specification
            (https://www.w3.org/TR/trace-context/#sampled-flag). 
            </param>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Correlation.IncomingRequestOptions.IsParentSampled">
            <summary>
            Determines whether the parent request was logged as a result of sampling,
            i.e. it was logged by a policy that had a sampling clause. It corresponds
            to the <c>sampled</c> flag of the W3C Trace Context specification
            (https://www.w3.org/TR/trace-context/#sampled-flag). 
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions">
            <summary>
            Options of the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.WriteCustomParameter``1(System.Int32,PostSharp.Patterns.Formatters.CharSpan@,``0,PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions@)"/> method.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions.Mode">
            <summary>
            Determines how the parameter should be rendered.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions.#ctor(PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterMode)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions"/>.
            </summary>
            <param name="mode">Determines how the parameter should be rendered.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterMode">
            <summary>
            Determines how a parameter of a custom record should be rendered by the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.WriteCustomParameter``1(System.Int32,PostSharp.Patterns.Formatters.CharSpan@,``0,PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions@)"/>
            method.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterMode.Default">
            <summary>
            Only the parameter value is rendered.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterMode.NameValuePair">
            <summary>
            The parameter is rendered in <c>name = value</c> form.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterMode.Hidden">
            <summary>
            The parameter is not rendered.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordOptions">
            <summary>
            Options of the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.BeginWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem,PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions@)"/> method.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordOptions.Level">
            <summary>
            Severity of the log record.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordOptions.Kind">
            <summary>
            Kind of log record (typically <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivityEntry"/>, <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivityExit"/>
            or <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomRecord"/>).
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordOptions.Attributes">
            <summary>
            Describes how the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder"/> will be used.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordOptions.Properties">
            <summary>
            Gets the activity properties. 
            </summary>
            <summary>
            Gets or sets the activity properties.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordOptions.Data">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> for the current record.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordOptions.#ctor(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordAttributes,PostSharp.Patterns.Diagnostics.Custom.LogEventData@)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordOptions"/>.
            </summary>
            <param name="level"></param>
            <param name="kind"></param>
            <param name="attributes"></param>
            <param name="data"></param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem">
            <summary>
            Enumerates the situations in which an <see cref="T:PostSharp.Patterns.Diagnostics.Custom.Messages.IMessage"/> can be rendered.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem.ActivityDescription">
            <summary>
            Description of an activity.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem.ActivityOutcome">
            <summary>
            Outcome of an activity.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions">
            <summary>
            Options of the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.BeginWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem,PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions@)"/> method.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions.Name">
            <summary>
            Gets the semantic name of the message (<c>null</c> in case of a non-semantic message).
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions.ParameterCount">
            <summary>
            Gets the number of parameters in the message.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions"/>.
            </summary>
            <param name="parameterCount">Number of parameters in the message.</param>
            <param name="name">Semantic name of the message (<c>null</c> in case of a non-semantic message).</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser">
            <summary>
            Parses the formatting string for custom messages of the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> and <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/> classes.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser"/>.
            </summary>
            <param name="formattingString">The formatting string.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.GetNextSubstring">
            <summary>
            Gets the next substring (until the next parameter or the end of the string).
            </summary>
            <returns>The next substring.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser.GetNextParameter">
            <summary>
            Gets the next parameter name.
            </summary>
            <returns>The name of the next parameter, or the default (null) value if there is no next parameter.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger">
            <summary>
            Abstraction of custom logging methods where the contact has already been resolved.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
            <summary>
            Determines whether logging is enabled for a given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.
            </summary>
            <param name="level">A record level (or severity).</param>
            <returns><c>true</c> if logging is enabled for <paramref name="level"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.OpenActivity(PostSharp.Patterns.Diagnostics.OpenActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Opens a new context for a custom activity.
            </summary>
            <param name="options">Options.</param>
            <param name="callerInfo">Information about the caller code.</param>
            <returns>A new context for the custom activity.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.GetRecordBuilder(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)">
            <summary>
            Gets a record builder.
            </summary>
            <param name="options">Options.</param>
            <param name="callerInfo">Information about the caller code.</param>
            <param name="context">The context for which the record will be built, or <c>null</c> for standalone records.</param>
            <returns>A record builder.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.ResumeActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Resumes an asynchronous activity suspended by the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/> method.
            </summary>
            <param name="context">A context representing an asynchronous custom activity, created by <see cref="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.OpenActivity(PostSharp.Patterns.Diagnostics.OpenActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/>
            and suspended by <see cref="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/>.</param>
            <param name="callerInfo">Information about the caller code.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Suspends an asynchronous activity, which can then be resumed by the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.ResumeActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/> method.
            </summary>
            <param name="context">A context representing an asynchronous custom activity, created by <see cref="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.OpenActivity(PostSharp.Patterns.Diagnostics.OpenActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/>.</param>
            <param name="callerInfo">Information about the caller code.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger.SetWaitDependency(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,System.Object)">
            <summary>
            Sets the wait dependency for a given context, i.e. give information about what the given context is waiting (or awaiting) for.
            </summary>
            <param name="context">The waiting context.</param>
            <param name="waited">The "thing" that is awaited for. Typically a <see cref="T:System.Threading.Tasks.Task"/>, or <c>TaskInfo</c>, or another context.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ITransactionAwareContextLocalLogger">
            <summary>
            This means a <c>LoggingTypeSource</c> starting in 6.8.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ITransactionAwareContextLocalLogger.ApplyTransactionRequirements(PostSharp.Patterns.Diagnostics.OpenActivityOptions@)">
            <summary>
            Evaluates whether a transaction needs to be open for a specified <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions"/> and updates
            its <see cref="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.TransactionRequirement"/> property.
            This method must be invoked before calling <see cref="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.OpenActivity``1(``0@,PostSharp.Patterns.Diagnostics.OpenActivityOptions@)"/>.
            </summary>
            <param name="options">Options of the custom activity that creates the transaction.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder">
            <summary>
            Allows to build a custom log record (typically, but not necessarily, a string). A log record can be composed of one of several
            items.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.BeginWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem,PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions@)">
            <summary>
            Begins to build a specified item.
            </summary>
            <param name="item">The item being built.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.EndWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem)">
            <summary>
            Ends building a specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.WriteCustomParameter``1(System.Int32,PostSharp.Patterns.Formatters.CharSpan@,``0,PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions@)">
            <summary>
            Writes a custom parameter.
            </summary>
            <typeparam name="T">Type of the parameter value.</typeparam>
            <param name="index">Index of the parameter (zero-based).</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.WriteCustomString(PostSharp.Patterns.Formatters.CharSpan@)">
            <summary>
            Writes a string.
            </summary>
            <param name="str">A string.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.SetException(System.Exception)">
            <summary>
            Assigns an <see cref="T:System.Exception"/> to the record.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.SetExecutionTime(System.Double,System.Boolean)">
            <summary>
            Sets an execution time to the record.
            </summary>
            <param name="executionTime">Execution time.</param>
            <param name="isOvertime"><c>true</c> whether the activity is overtime, otherwise <c>false</c>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.Complete">
            <summary>
            Completes the creation of the record. It must be invoked before <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILogActivityOptions">
            <summary>
            Exposes the default verbosity of the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> and <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/> classes when creating and closing activities.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogActivityOptions.ActivityLevel">
            <summary>
            Gets or sets the default severity for custom messages and for entry and success messages of activities.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogActivityOptions.FailureLevel">
            <summary>
            Gets or sets the <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/> for failures of custom activities (defined by the <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> method).
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogActivityOptions.ExceptionLevel">
            <summary>
            Gets or sets the default severity for failure custom messages.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILogger">
            <summary>
            Abstraction of the Logging facility, through which other components emit their log records. This
            interfaces abstracts other PostSharp components from the PostSharp.Patterns.Diagnostics component.
            </summary>
            <remarks>
            <para>If you want to implement this interface, you should also implement the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory"/> interface
            and register it to the <see cref="T:PostSharp.Patterns.Utilities.ServiceLocator"/>.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.Type">
            <summary>
            Gets the source <see cref="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.Type"/> for which this <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/> was created.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.Role">
            <summary>
            Gets the role of records created by this <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/>. A list of standard roles is available in the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles"/> class.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
            <summary>
            Determines whether logging is enabled for a given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.
            </summary>
            <param name="level">A record level (or severity).</param>
            <returns><c>true</c> if logging is enabled for <paramref name="level"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.ActivityOptions">
            <summary>
            Gets the default verbosity when opening and closing activities.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger.RequiresSuspendResume">
            <summary>
            Determines whether calls of <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/> and <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.ResumeActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/> 
            is required for asynchronous custom activities in the current context.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with a description without parameters.
            </summary>
            <param name="level"><see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/> of the record.</param>
            <param name="context"></param>
            <param name="recordKind">Kind of record.</param>
            <param name="text">Text of the record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="callerInfo">Information about the caller source code.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,System.Object[],System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with a description with an array of parameters.
            </summary>
            <param name="level"><see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/> of the record.</param>
            <param name="context"></param>
            <param name="recordKind">Kind of record.</param>
            <param name="text">Text of the record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="callerInfo">Information about the caller source code.</param>
            <param name="args">An array of parameters.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Opens an activity.
            </summary>
            <param name="options">Options.</param>
            <param name="callerInfo">Information about the caller source code.</param>
            <returns>An <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext"/> representing the new activity.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.ResumeActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Resumes an asynchronous activity suspended by the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/> method.
            </summary>
            <param name="context">A context representing an asynchronous custom activity, created by <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/>
            and suspended by <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/>.</param>
            <param name="callerInfo">Information about the caller source code.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SuspendActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Suspends an asynchronous activity, which can then be resumed by the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.ResumeActivity(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/> method.
            </summary>
            <param name="context">A context representing an asynchronous custom activity, created by <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)"/>.</param>
            <param name="callerInfo">Information about the caller source code.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.SetWaitDependency(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,System.Object)">
            <summary>
            Sets the wait dependency for a given context, i.e. give information about what the given context is waiting (or awaiting) for.
            </summary>
            <param name="context">The waiting context.</param>
            <param name="waited">The "thing" that is awaited for. Typically a <see cref="T:System.Threading.Tasks.Task"/>, or <c>TaskInfo</c>, or another context.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``1(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 1 parameter.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller souICustomActivityLoggingContextrce code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``2(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 2 parameters.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller source code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
            <typeparam name="T2">Type of the 2-th parameter.</typeparam>
            <param name="arg2">Value of the 2-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``3(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 3 parameters.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller source code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
            <typeparam name="T2">Type of the 2-th parameter.</typeparam>
            <param name="arg2">Value of the 2-th parameter.</param>
            <typeparam name="T3">Type of the 3-th parameter.</typeparam>
            <param name="arg3">Value of the 3-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``4(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 4 parameters.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller source code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
            <typeparam name="T2">Type of the 2-th parameter.</typeparam>
            <param name="arg2">Value of the 2-th parameter.</param>
            <typeparam name="T3">Type of the 3-th parameter.</typeparam>
            <param name="arg3">Value of the 3-th parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``5(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 5 parameters.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller source code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
            <typeparam name="T2">Type of the 2-th parameter.</typeparam>
            <param name="arg2">Value of the 2-th parameter.</param>
            <typeparam name="T3">Type of the 3-th parameter.</typeparam>
            <param name="arg3">Value of the 3-th parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``6(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 6 parameters.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller source code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
            <typeparam name="T2">Type of the 2-th parameter.</typeparam>
            <param name="arg2">Value of the 2-th parameter.</param>
            <typeparam name="T3">Type of the 3-th parameter.</typeparam>
            <param name="arg3">Value of the 3-th parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``7(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,``6,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 7 parameters.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller source code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
            <typeparam name="T2">Type of the 2-th parameter.</typeparam>
            <param name="arg2">Value of the 2-th parameter.</param>
            <typeparam name="T3">Type of the 3-th parameter.</typeparam>
            <param name="arg3">Value of the 3-th parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``8(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,``6,``7,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 8 parameters.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller source code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
            <typeparam name="T2">Type of the 2-th parameter.</typeparam>
            <param name="arg2">Value of the 2-th parameter.</param>
            <typeparam name="T3">Type of the 3-th parameter.</typeparam>
            <param name="arg3">Value of the 3-th parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``9(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 9 parameters.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller source code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
            <typeparam name="T2">Type of the 2-th parameter.</typeparam>
            <param name="arg2">Value of the 2-th parameter.</param>
            <typeparam name="T3">Type of the 3-th parameter.</typeparam>
            <param name="arg3">Value of the 3-th parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger.Write``10(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <summary>
            Writes a custom log record with 10 parameters.
            </summary>
            <param name="context">The context for which the message has to be written.</param>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="recordKind">Kind of record.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record, or <c>null</c>.</param>
            <param name="recordInfo">Information about the caller source code.</param>
            <typeparam name="T1">Type of the 1-th parameter.</typeparam>
            <param name="arg1">Value of the 1-th parameter.</param>
            <typeparam name="T2">Type of the 2-th parameter.</typeparam>
            <param name="arg2">Value of the 2-th parameter.</param>
            <typeparam name="T3">Type of the 3-th parameter.</typeparam>
            <param name="arg3">Value of the 3-th parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
            <typeparam name="T10">Type of the 10-th parameter.</typeparam>
            <param name="arg10">Value of the 10-th parameter.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger">
            <summary>
            A base class for implementations of <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/> that cannot depend on the <c>PostSharp.Patterns.Diagnostics</c> package.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger"/>.
            </summary>
            <param name="role">The role.</param>
            <param name="type">The source <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger.Type"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger.Factory">
            <inheritdoc/>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger.Type">
            <inheritdoc/>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger.Role">
            <inheritdoc/>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger.RequiresSuspendResume">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LegacySourceLogger.Write(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,System.String,System.Exception)">
            <summary>
            Writes a text message.
            </summary>
            <param name="level"></param>
            <param name="recordKind"></param>
            <param name="text">The fully-rendered message.</param>
            <param name="exception">An optional <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILogger2">
            <summary>
            Extends <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger2.Factory">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory"/>, which allows to create new instances of the logger. This is used for instance by <see cref="M:PostSharp.Patterns.Diagnostics.LogSource.ForType(System.Type)"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger2.GetContextLocalLogger">
            <summary>
            Gets the logger for the current context.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger2.CurrentContext">
            <summary>
            Gets the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext"/>.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILogger3">
            <summary>
            Extends <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger2"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.ILogger3.Factory">
            <summary>
            Gets the logger for the current context and returns a flag determining if the logger is enabled for a given level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILogger3.GetContextLocalLogger(PostSharp.Patterns.Diagnostics.LogLevel)">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger"/> plus a flag indicating whether the source is enabled for a given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.
            </summary>
            <param name="level">Log level.</param>
            <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.Custom.IContextLocalLogger"/> for the current execution context and a flag indicating whether logging
            is enabled for the given <paramref name="level"/>.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerExceptionHandler">
            <summary>
            Defines methods called in case of exception in the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class. This interface
            can be implemented by any class implementing the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/> interface.
            When an <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/> does not implement this interface, logging exceptions are simply silently ignored.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggerExceptionHandler.OnInvalidUserCode(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@,System.String,System.Object[])">
            <summary>
            Method invoked when the user code calling <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> or <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/> is invalid, e.g. when the formatting string
            is incorrect or does not match the arguments.
            </summary>
            <param name="callerInfo">Information about the line of code causing the error.</param>
            <param name="format">Formatting string of the error message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggerExceptionHandler.OnInternalException(System.Exception)">
            <summary>
            Method invoked when an exception is thrown in logging code.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory">
            <summary>
            Creates instances of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/> interface. An instance of this interface must be registered into the <see cref="T:PostSharp.Patterns.Utilities.ServiceLocator"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory.GetLogger(System.String,System.Type)">
            <summary>
            Gets an instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/> interface for a given role and <see cref="T:System.Type"/>.
            </summary>
            <param name="role">The role for which the logger is requested.</param>
            <param name="type">The type of the source code that will emit the records.</param>
            <returns>An instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/> interface for <paramref name="role"/> and <paramref name="type"/>.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactoryProvider">
            <summary>
            Creates instances of <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory2"/>. An instance of this interface must be registered into the <see cref="T:PostSharp.Patterns.Utilities.ServiceLocator"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactoryProvider.GetLoggerFactory(System.String)">
            <summary>
            Gets an instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory2"/> interface.
            </summary>
            <param name="role">The role for which the logger is requested.</param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactoryProvider3">
            <summary>
            A new version of <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactoryProvider"/> that also provides a logger factory that can create loggers based on names rather than
            based on a type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactoryProvider3.GetLoggerFactory3(System.String)">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory3"/> for the given role.
            </summary>
            <param name="role">The role for which the logger is requested.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory2">
            <summary>
            Creates instances of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger2"/> interface.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory2.GetLogger(System.Type)">
            <summary>
            Gets an instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger2"/> for a specific <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type of the source code that will emit the records.</param>
            <returns>An instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger2"/> interface for <paramref name="type"/>.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory3">
            <summary>
            Creates instances of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger2"/> interface based on names rather than types, in addition to based on types.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory3.GetLogger(System.Type)">
            <summary>
            Gets an instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger3"/> for a specific <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type of the source code that will emit the records.</param>
            <returns>An instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger2"/> interface for <paramref name="type"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory3.GetLogger(System.String)">
             <summary>
            Gets an instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger2"/> interface for a specific <paramref name="sourceName"/>. The name will
             usually, but not always, be a type name.
             </summary>
             <param name="sourceName">Name identifying the returned logger. The backend creates a logger based on this name.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor`1">
            <summary>
            Defines a <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor`1.Visit``1(System.String,``0,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions@,`0@)"/> method invoked for each property of
            a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.
            </summary>
            <typeparam name="TState">Type of an opaque value passed to the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor`1.Visit``1(System.String,``0,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions@,`0@)"/> method.
            </typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor`1.Visit``1(System.String,``0,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions@,`0@)">
            <summary>
            Method invoked for each property in a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.
            </summary>
            <typeparam name="TValue">Type of the property.</typeparam>
            <param name="name">Property name.</param>
            <param name="value">Property value.</param>
            <param name="options">Property options.</param>
            <param name="state">State passed from the caller through the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.VisitProperties``1(PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor{``0},``0@,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions@)"/>
            method.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.InvalidFormattingStringException">
            <summary>
            Exception thrown by the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.FormattingStringParser"/> and by the <c>Logger</c> class
            when user code provides an invalid formatting string.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.InvalidFormattingStringException.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.InvalidFormattingStringException"/> with the default error message.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.InvalidFormattingStringException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.InvalidFormattingStringException"/> and specifies the error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.InvalidFormattingStringException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.InvalidFormattingStringException"/> and specifies the error message and
            the inner <see cref="T:System.Exception"/>.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.InvalidFormattingStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData">
            <summary>
            Specifies the properties of a log event (such as a message, an activity opening or an activity closing).
            Properties are typically passed in user code as an instance of an anonymous type. Any object can be provided. The properties
            of the message then stem from the properties of the CLR object. To change the logic that maps the CLR object to
            the list of property, you can specify a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Metadata">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>, which exposes the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Data"/> as a visitable set of name-value properties.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Data">
            <summary>
            Gets the raw CLR object. It must be interpreted using the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Metadata"/> property.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Create(System.Object,PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata)">
            <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> and specifies a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>.
            </summary>
            <param name="data">The raw CLR object, typically an instance of anonymous type or any other type.</param>
            <param name="metadata">The <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/> used to interpret <paramref name="data"/>. When this parameter
            is <c>null</c>, the default <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/> implementation is used, which maps CLR properties into logging properties.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Create(System.Object)">
            <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> and uses the default <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/> for the run-time type of the specified object.
            </summary>
            <param name="data">The raw CLR object, typically an instance of anonymous type or any other type.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Create``1(``0)">
            <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> and uses the default <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/> for the build-time type of the specified object.
            This overload is faster than the non-generic one.
            </summary>
            <param name="data">The raw CLR object, typically an instance of anonymous type or any other type.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.VisitProperties``1(PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor{``0},``0@,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions@)">
            <summary>
            Invokes an action for each property in the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.
            </summary>
            <typeparam name="TVisitorState">The type of the <paramref name="visitorState"/> parameter, an opaque value passed to <paramref name="visitor"/>.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="visitorState">An opaque value passed to <paramref name="visitor"/>.</param>
            <param name="visitorOptions">Determines which properties need to be visited. By default, all properties are visited.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.ToDictionary">
            <summary>
            Returns a dictionary containing all properties contained in the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Equals(PostSharp.Patterns.Diagnostics.Custom.LogEventData)">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.op_Equality(PostSharp.Patterns.Diagnostics.Custom.LogEventData,PostSharp.Patterns.Diagnostics.Custom.LogEventData)">
            <summary>
            Determines whether two instances of the <seealso cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> type are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.op_Inequality(PostSharp.Patterns.Diagnostics.Custom.LogEventData,PostSharp.Patterns.Diagnostics.Custom.LogEventData)">
            <summary>
            Determines whether two instances of the <seealso cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> type are different.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.WithAdditionalProperty``1(System.String,``0,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions@)">
            <summary>
            Returns a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> that augments the current one with an additional property,
            but does not change the expression model.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata">
            <summary>
            Defines how the raw CLR object stored in a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> is translated into a set of visitable properties and an expression
            that is accessible from the transaction policy expressions.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.Name">
            <summary>
            Gets the name of the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>. This property may be undefined. It must be defined 
            when the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> must be available for evaluation from transaction policy expressions. In this case,
            the type of expression model (i.e. the generic parameter of <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata`1"/>) must be identical for identical
            values of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.Name"/> property.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>.
            </summary>
            <param name="name">Optional. The name of the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>. This property may be undefined. It must be defined 
            when the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> must be available for evaluation from transaction policy expressions. In this case,
            the type of expression model (i.e. the generic parameter of <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata`1"/>) must be identical for identical
            values of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.Name"/> property.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.HasInheritedProperty(System.Object)">
            <summary>
            Determines if the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/> contains any inherited property. The implementation of this method must not allocate heap memory.
            </summary>
            <param name="data">The raw CLR object, typically <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Data" qualifyHint="true"/></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.GetPropertyOptions(System.String)">
            <summary>
            Gets the options of a given property.
            </summary>
            <param name="name">The property name.</param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.VisitProperties``1(System.Object,PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor{``0},``0@,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions@)">
            <summary>
            Invokes an action for each property in the raw CLR object of a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.
            </summary>
            <typeparam name="TVisitorState">The type of the <paramref name="visitorState"/> parameter, an opaque value passed to <paramref name="visitor"/>.</typeparam>
            <param name="data">The raw CLR object, typically <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Data" qualifyHint="true"/>.</param>
            <param name="visitor">The visitor.</param>
            <param name="visitorState">An opaque value passed to <paramref name="visitor"/>.</param>
            <param name="visitorOptions">Determines which properties need to be visited. By default, all properties are visited.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata`1">
            <summary>
            A specialization of <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/> that specifies the type of the 
            expression model type, i.e. the type exposed to transaction policy expressions.
            </summary>
            <typeparam name="TExpressionModel">The type of the 
            expression model type, i.e. the type exposed to transaction policy expressions</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata`1.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>.
            </summary>
            <param name="name">The name of the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>. This property may be undefined. It must be defined 
            when the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> must be available for evaluation from transaction policy expressions. In this case,
            the type of expression model (i.e. the generic parameter of <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata`1"/>) must be identical for identical
            values of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.Name"/> property.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata`1.GetExpressionModel(System.Object)">
            <summary>
            Gets the object that must be exposed to the expressions in transaction policies.
            </summary>
            <param name="data">The raw CLR object, typically <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LogEventData.Data" qualifyHint="true"/>.</param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertiesExpressionModel">
            <summary>
            Type of the <c>t</c> parameters for <c>if</c> and <c>sample</c> expressions in the policy configuration file.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertiesExpressionModel.Item(System.String)">
            <summary>
            Returns the value of the logging property with the given name, or null if there is no such logging property.
            </summary>
            <param name="key">Name of a logging property.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertiesExpressionModel.GetInt32(System.String,System.Int32)">
            <summary>
            Gets the value of a logging property as an Int32, or <paramref name="defaultValue"/> if the property does not exist. Throws an exception if the property
            exists but can't be converted to Int32 using <see cref="M:System.Convert.ToInt32(System.Object)"/>.
            </summary>
            <param name="property">Name of a logging property.</param>
            <param name="defaultValue">The default value to return if the property does not exist.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertiesExpressionModel.GetInt64(System.String,System.Int64)">
            <summary>
            Gets the value of a logging property as an Int64, or <paramref name="defaultValue"/> if the property does not exist. Throws an exception if the property
            exists but can't be converted to Int64 using <see cref="M:System.Convert.ToInt64(System.Object)"/>.
            </summary>
            <param name="property">Name of a logging property.</param>
            <param name="defaultValue">The default value to return if the property does not exist.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertiesExpressionModel.GetString(System.String,System.String)">
            <summary>
            Gets the value of a logging property as a string, or <paramref name="defaultValue"/> if the property does not exist.
            </summary>
            <param name="property">Name of a logging property.</param>
            <param name="defaultValue">The default value to return if the property does not exist.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertiesExpressionModel.Contains(System.String)">
            <summary>
            Returns true if a logging property with the given name exists.
            </summary>
            <param name="property">Name of a logging property that might exist.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions">
            <summary>
            Specifies the behavior of logging properties (exposed by <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>), such as
            <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsRendered"/>, <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsInherited"/> or <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsBaggage"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,PostSharp.Patterns.Formatters.IFormatter)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions"/>.
            </summary>
            <param name="isRendered">Determines whether the property will be included in the log message. The default value is <c>false</c>, then
            the property is only available as an additional property, if this is supported by the backend.</param>
            <param name="isInherited"> Determines whether the property is inherited from the parent activity to children activities and messages. The default value is <c>true</c>.
             When this property is set to <c>false</c>, <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsBaggage"/> is automatically set to <c>false</c>.
            </param>
            <param name="isBaggage">
             Determines whether the property is cross-process. The default value is <c>false</c>. When this property is set to <c>true</c>, <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsInherited"/> is automatically
            set to <c>true</c>.
            </param>
            <param name="isIgnored">Determines whether this property must be ignored by the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.VisitProperties``1(System.Object,PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor{``0},``0@,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions@)"/>
            method.</param>
            <param name="formatter">The formatter to be used to render the property value.</param>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.Formatter">
            <summary>
            Gets the formatter to be used to render the property value.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.WithFormatter(PostSharp.Patterns.Formatters.IFormatter)">
            <summary>
            Returns a copy of the current <seealso cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions"/> but with a different value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.Formatter"/> property.
            </summary>
            <param name="formatter">The formatter to be used to render the property value.</param>
            <returns></returns>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsIgnored">
            <summary>
            Determines whether this property must be ignored by the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.VisitProperties``1(System.Object,PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor{``0},``0@,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions@)"/>
            method. This value is typically only returned by <see cref="M:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata.GetPropertyOptions(System.String)"/> to say that a property of the raw CLR object
            must not be exposed as a logging property.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.WithIsIgnored(System.Boolean)">
            <summary>
            Returns a copy of the current <seealso cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions"/> but with a different value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsIgnored"/> property.
            </summary>
            <param name="value">New value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsIgnored"/> property.</param>
            <returns></returns>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsRendered">
            <summary>
            Determines whether the property will be included in the log message. The default value is <c>false</c>, then
            the property is only available as an additional property, if this is supported by the backend.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.WithIsRendered(System.Boolean)">
            <summary>
            Returns a copy of the current <seealso cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions"/> but with a different value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsRendered"/> property.
            </summary>
            <param name="value">New value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsRendered"/> property.</param>
            <returns></returns>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsInherited">
            <summary>
            Determines whether the property is inherited from the parent activity to children activities and messages. The default value is <c>true</c>.
             When this property is set to <c>false</c>, <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsBaggage"/> is automatically set to <c>false</c>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.WithIsInherited(System.Boolean)">
            <summary>
            Returns a copy of the current <seealso cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions"/> but with a different value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsInherited"/> property.
            </summary>
            <param name="value">New value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsInherited"/> property.</param>
            <returns></returns>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsBaggage">
            <summary>
            Determines whether the property is cross-process. The default value is <c>false</c>. When this property is set to <c>true</c>, <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsInherited"/> is automatically
            set to <c>true</c>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.WithIsBaggage(System.Boolean)">
            <summary>
            Returns a copy of the current <seealso cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions"/> but with a different value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsBaggage"/> property.
            </summary>
            <param name="value">New value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsBaggage"/> property.</param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptionsAttribute">
            <summary>
            Specifies the options (<see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions"/>) of a logging property that is
            expresses as a public property of a CLR type.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptionsAttribute.IsIgnored">
            <summary>
            Specifies that this property is ignored, i.e. it should not be mapped to a logging property.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptionsAttribute.IsRendered">
            <summary>
            Specifies that this property must be included into the message.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptionsAttribute.IsInherited">
            <summary>
            Specifies that this property is inherited by child contexts.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptionsAttribute.IsBaggage">
            <summary>
            Specifies that this property must be carried in cross-process requests.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptionsAttribute.ToOptions">
            <summary>
            Converts the current attribute into a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions">
            <summary>
            Determines the behavior of the <see cref="M:PostSharp.Patterns.Diagnostics.Custom.LogEventData.VisitProperties``1(PostSharp.Patterns.Diagnostics.Custom.ILoggingPropertyVisitor{``0},``0@,PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions@)"/>
            method.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions"/>.
            </summary>
            <param name="onlyInherited">Determines if only inherited properties (those with the
            <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsInherited" qualifyHint="true"/> flag set to <c>true</c>) must be visited.</param>
            <param name="includeInherited">Determines if inherited properties must be included. This flag is taken into account by the visitors implemented on the logging contexts
            only. It is ignored by other visiting methods.</param>
            <param name="onlyRendered">Determines if only rendered properties must be visited.</param>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.OnlyInherited">
            <summary>
            Determines if only inherited properties (those with the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptions.IsInherited" qualifyHint="true"/> flag set to <c>true</c>)
            must be visited.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.IncludeInherited">
            <summary>
            Determines if inherited properties must be included. This flag is taken into account by the visitors implemented on the logging contexts
            only. It is ignored by other visiting methods.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.OnlyRendered">
            <summary>
            Determines if only rendered properties must be visited.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.WithOnlyInherited(System.Boolean)">
            <summary>
            Returns a copy of the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions"/> but with a specific value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.OnlyInherited"/> property.
            </summary>
            <param name="value">The new value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.OnlyInherited"/> property.</param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.WithOnlyRendered(System.Boolean)">
            <summary>
            Returns a copy of the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions"/> but with a specific value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.OnlyRendered"/> property.
            </summary>
            <param name="value">The new value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.OnlyRendered"/> property.</param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.WithIncludeInherited(System.Boolean)">
            <summary>
            Returns a copy of the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions"/> but with a specific value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.IncludeInherited"/> property.
            </summary>
            <param name="value">The new value of the <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyVisitorOptions.IncludeInherited"/> property.</param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource">
            <summary>
            A facade to a <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> constrained to a specific <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.
            Instances of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource"/> class are exposed as properties of the <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/>
            class, e.g. <see cref="P:PostSharp.Patterns.Diagnostics.LogSource.Debug"/> or <see cref="P:PostSharp.Patterns.Diagnostics.LogSource.Error"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.Write``1(``0@,PostSharp.Patterns.Diagnostics.WriteMessageOptions@)">
            <summary>
            Writes a message.
            </summary>
            <typeparam name="T">Type of the <paramref name="message"/>.</typeparam>
            <param name="message">The message, typically created using the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> or <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.Write``1(``0@,PostSharp.Patterns.Diagnostics.WriteMessageOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.Write``1(``0@,System.Exception,PostSharp.Patterns.Diagnostics.WriteMessageOptions@)">
            <summary>
            Writes a message and specifies an <see cref="T:System.Exception"/>.
            </summary>
            <typeparam name="T">Type of the <paramref name="message"/>.</typeparam>
            <param name="message">The message, typically created using the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> or <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class.</param>
            <param name="exception">An optional <see cref="T:System.Exception"/>.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.Write``1(``0@,System.Exception,PostSharp.Patterns.Diagnostics.WriteMessageOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.OpenActivity``1(``0@,PostSharp.Patterns.Diagnostics.OpenActivityOptions@)">
            <summary>
            Opens an activity. 
            </summary>
            <param name="description">The activity description, typically created using the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> or <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class.</param>
            <param name="options">Options.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.OpenActivity``1(``0@,PostSharp.Patterns.Diagnostics.OpenActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.LogActivity``1(``0@,System.Action,PostSharp.Patterns.Diagnostics.OpenActivityOptions@)">
            <summary>
            Executes an <see cref="T:System.Action"/> and logs its execution.
            </summary>
            <typeparam name="TDescription">The type of the description message.</typeparam>
            <param name="description">The activity description, typically created using the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> or <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class.</param>
            <param name="action">The action be be executed.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.LogActivity``1(``0@,System.Action,PostSharp.Patterns.Diagnostics.OpenActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.LogActivity``2(``0@,System.Func{``1},PostSharp.Patterns.Diagnostics.OpenActivityOptions@)">
            <summary>
            Executes a <see cref="T:System.Func`1"/> and logs its execution.
            </summary>
            <typeparam name="TDescription">The type of the description message.</typeparam>
            <typeparam name="TResult">The type of the return value of the action to execute.</typeparam>
            <param name="description">The activity description, typically created using the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> or <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class.</param>
            <param name="action">The action be be executed.</param>
            <param name="options">Options.</param>
            <returns>The return value of <paramref name="action"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.LogActivity``2(``0@,System.Func{``1},PostSharp.Patterns.Diagnostics.OpenActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.LogActivityAsync``1(``0@,System.Func{System.Threading.Tasks.Task},PostSharp.Patterns.Diagnostics.OpenActivityOptions@)">
            <summary>
            Executes an asynchronous void delegate and logs its execution.
            </summary>
            <typeparam name="TDescription">The type of the description message.</typeparam>
            <param name="description">The activity description, typically created using the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> or <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class.</param>
            <param name="action">The action be be executed.</param>
            <param name="options">Options.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.LogActivityAsync``1(``0@,System.Func{System.Threading.Tasks.Task},PostSharp.Patterns.Diagnostics.OpenActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.LogActivityAsync``2(``0@,System.Func{System.Threading.Tasks.Task{``1}},PostSharp.Patterns.Diagnostics.OpenActivityOptions@)">
            <summary>
            Executes an asynchronous non-void delegate and logs its execution.
            </summary>
            <typeparam name="TDescription">The type of the description message.</typeparam>
            <typeparam name="TResult">The type of the return value of the action to execute.</typeparam>
            <param name="description">The activity description, typically created using the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> or <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class.</param>
            <param name="action">The action be be executed.</param>
            <param name="options">Options.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> whose result will be set to the result of <paramref name="action"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.LogActivityAsync``2(``0@,System.Func{System.Threading.Tasks.Task{``1}},PostSharp.Patterns.Diagnostics.OpenActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.Level">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/> to which the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource"/> is constrained.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.IsEnabled">
            <summary>
            Determines whether logging is enabled for the current <see cref="P:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.Level"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.EnabledOrNull">
            <summary>
            Returns the current <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource"/>, or <c>null</c> if logging is not enabled for the current instance. This
            property allows to write conditional logging using the <c>?.</c> operator.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordAttributes">
            <summary>
            Attributes of the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions"/> class. Describes how the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder"/> will be used.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordAttributes.None">
            <summary>
            Legacy value set by <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/> implementations. No information is provided by the caller.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordAttributes.WriteActivityDescription">
            <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder"/> will be used to write the context description.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordAttributes.WriteActivityOutcome">
            <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder"/> will be used to write the context outcome.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordAttributes.WriteActivityDescriptionAndOutcome">
            <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder"/> will be used to write the context description and outcome.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordAttributes.WriteMessage">
            <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder"/> will be used to write a standalone message.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage">
            <summary>
            Encapsulates a formatted message without parameter. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessageArray">
            <summary>
            Encapsulates a formatted message with an arbitrary number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessageArray.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.IMessage">
            <summary>
            Represents a message that can be used with the <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> class. To create a message 
            instance, you would typically use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> or <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.IMessage.Write(PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder,PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem)">
            <summary>
            Renders the current message into a given <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder"/>.
            </summary>
            <param name="builder">A <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder"/>.</param>
            <param name="kind">The situation in which the message is rendered (to be passed to <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.BeginWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem,PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions@)"/>)..</param>
            <remarks>
            <para>The <see cref="T:PostSharp.Patterns.Diagnostics.Custom.Messages.IMessage"/> implementation is responsible for invoking <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.BeginWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem,PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions@)"/>
            and <see cref="M:PostSharp.Patterns.Diagnostics.Custom.ICustomLogRecordBuilder.EndWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem)"/>.
            </para>
            </remarks>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage">
            <summary>
            Encapsulates a semantic message without parameter. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessageArray">
            <summary>
            Encapsulates a semantic message with an arbitrary number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessageArray.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`1">
            <summary>
            Encapsulates a text message with 1 parameter. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`1">
            <summary>
            Encapsulates a semantic message with a 1 number of parameter. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`2">
            <summary>
            Encapsulates a text message with 2 parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`2">
            <summary>
            Encapsulates a semantic message with a 2 number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`3">
            <summary>
            Encapsulates a text message with 3 parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`3.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`3">
            <summary>
            Encapsulates a semantic message with a 3 number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`3.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`4">
            <summary>
            Encapsulates a text message with 4 parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`4.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`4">
            <summary>
            Encapsulates a semantic message with a 4 number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`4.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`5">
            <summary>
            Encapsulates a text message with 5 parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`5.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`5">
            <summary>
            Encapsulates a semantic message with a 5 number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`5.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`6">
            <summary>
            Encapsulates a text message with 6 parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`6.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`6">
            <summary>
            Encapsulates a semantic message with a 6 number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`6.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`7">
            <summary>
            Encapsulates a text message with 7 parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`7.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`7">
            <summary>
            Encapsulates a semantic message with a 7 number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`7.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`8">
            <summary>
            Encapsulates a text message with 8 parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`8.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`8">
            <summary>
            Encapsulates a semantic message with a 8 number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`8.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`9">
            <summary>
            Encapsulates a text message with 9 parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`9.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`9">
            <summary>
            Encapsulates a semantic message with a 9 number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`9.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`10">
            <summary>
            Encapsulates a text message with 10 parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.FormattedMessage`10.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`10">
            <summary>
            Encapsulates a semantic message with a 10 number of parameters. Use the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> class to create an instance of this type.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Custom.Messages.SemanticMessage`10.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder">
            <summary>
            Creates messages based on a human-readable formatted string. These messages are suitable for structured logging are not optimal for machine analysis.
            For more succinct code, consider including the <c>using static PostSharp.Patterns.Diagnostics.FormattedMessageBuilder</c> statement.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted(System.String,System.Object[])">
            <summary>
            Creates a formatted string with an arbitrary number of parameters.
            </summary>
            <param name="formattingString">The formatting string.</param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted(System.String)">
            <summary>
            Creates a text message with no formatting string parameter.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``1(System.String,``0)">
            <summary>
            Creates a formatted string with 1 parameter.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``2(System.String,``0,``1)">
            <summary>
            Creates a formatted string with 2 parameters.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``3(System.String,``0,``1,``2)">
            <summary>
            Creates a formatted string with 3 parameters.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``4(System.String,``0,``1,``2,``3)">
            <summary>
            Creates a formatted string with 4 parameters.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Creates a formatted string with 5 parameters.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a formatted string with 6 parameters.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a formatted string with 7 parameters.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a formatted string with 8 parameters.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates a formatted string with 9 parameters.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder.Formatted``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates a formatted string with 10 parameters.
            </summary>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
            <typeparam name="T10">Type of the 10-th parameter.</typeparam>
            <param name="arg10">Value of the 10-th parameter.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.ILogActivity">
            <summary>
            Exposes the public API of the generic value type <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity`1"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.ILogActivity.Context">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext"/> corresponding to the current activity.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.SetSuccess(PostSharp.Patterns.Diagnostics.CloseActivityOptions@)">
            <summary>
            Closes the activity with success and sets no other outcome message than <c>Succeeded</c>.
            </summary>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.SetSuccess(PostSharp.Patterns.Diagnostics.CloseActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.SetResult``1(``0,PostSharp.Patterns.Diagnostics.CloseActivityOptions@)">
            <summary>
            Closes the activity with success and sets includes a result in the outcome message.
            </summary>
            <param name="result">The result of the activity.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.SetResult``1(``0,PostSharp.Patterns.Diagnostics.CloseActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.SetOutcome``1(PostSharp.Patterns.Diagnostics.LogLevel,``0@,System.Exception,PostSharp.Patterns.Diagnostics.CloseActivityOptions@)">
            <summary>
            Closes the activity and sets its outcome.
            </summary>
            <typeparam name="TMessage">Type of the <paramref name="message"/> parameter.</typeparam>
            <param name="level">Level of the outcome message.</param>
            <param name="message">The description of the activity outcome, typically created using the <see cref="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder"/> or <see cref="T:PostSharp.Patterns.Diagnostics.FormattedMessageBuilder"/> class.</param>
            <param name="exception">An optional <see cref="T:System.Exception"/>.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.SetOutcome``1(PostSharp.Patterns.Diagnostics.LogLevel,``0@,System.Exception,PostSharp.Patterns.Diagnostics.CloseActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.SetException(System.Exception,PostSharp.Patterns.Diagnostics.CloseActivityOptions@)">
            <summary>
            Closes the activity with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">An <see cref="T:System.Exception"/>.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.SetException(System.Exception,PostSharp.Patterns.Diagnostics.CloseActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.Resume">
            <summary>
            Resumes the current async activity after it has been suspended by a call to <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity`1.Suspend"/>. There is typically no need
            to invoke this method in user code because all async methods that use the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class are automatically instrumented.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.Resume(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.Suspend">
            <summary>
            Suspends the current async activity.
            The activity must than be resumed by a call of the <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity`1.Resume"/> method.
            There is typically no need to invoke this method in user code because all async methods that use the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class are automatically instrumented.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.ILogActivity.Suspend(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LogActivity">
            <summary>
            Represents a logged custom activity, i.e. something that a beginning and an end with a specific outcome.
            This class is instantiated by the legacy API of the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class. For the modern API, see <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity`1"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.#ctor(PostSharp.Patterns.Diagnostics.Custom.ILogger,PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/>.
            </summary>
            <param name="logger">The underlying <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILogger"/>.</param>
            <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext"/> implementing the new <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/>.</param>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogActivity.IsValid">
            <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/> is valid, i.e. calls to methods 
            <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/> will do something, or will be totally ignored.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success with the default success message.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a parameterless success message.
            </summary>
            <param name="text">The success message.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,System.Object[])">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with an array of parameters.
            </summary>
            <param name="text">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <param name="args">An array of parameters.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure with the default failure message.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a parameterless failure message.
            </summary>
            <param name="text">The failure message.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,System.Object[])">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with an array of parameters.
            </summary>
            <param name="text">The failure message with parameters, for instance <c>Invalid file at line {Line}</c>.</param>
            <param name="args">An array of parameters.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with a given <see cref="T:System.Exception"/>.
            </summary>
            <returns>Always <c>false</c>.</returns>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.Dispose(System.Boolean)">
            <summary>
            Disposes the current <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/>.
            </summary>
            <param name="disposing"><c>true</c> if the method is called because of a call to the <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.Dispose"/> public method, <c>false</c> if it is called by the object finalizer.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.Resume">
            <summary>
            Resumes the current async activity after it has been suspended by a call to <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.Suspend"/>. There is typically no need
            to invoke this method in user code because all async methods that use the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class are automatically instrumented.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.Resume(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.Suspend">
            <summary>
            Suspends the current async activity.
            The activity must than be resumed by a call of the <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.Resume"/> method.
            There is typically no need to invoke this method in user code because all async methods that use the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class are automatically instrumented.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.Suspend(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogActivity.Context">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext"/> created from the current <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``1(System.String,``0)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 1 parameter.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``1(System.String,``0)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 1 parameter.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 2 parameters.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 2 parameters.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 3 parameters.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 3 parameters.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 4 parameters.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 4 parameters.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 5 parameters.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 5 parameters.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 6 parameters.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 6 parameters.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 7 parameters.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 7 parameters.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 8 parameters.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 8 parameters.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 9 parameters.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 9 parameters.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with success and specifies a success message with 10 parameters.
            </summary>
            <param name="formattingString">The success message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
            <typeparam name="T10">Type of the 10-th parameter.</typeparam>
            <param name="arg10">Value of the 10-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Ends an activity (opened with <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>
            with failure and specifies a failure message with 10 parameters.
            </summary>
            <param name="formattingString">The failure message with parameters, for instance <c>Written {Count} lines</c>.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
            <typeparam name="T10">Type of the 10-th parameter.</typeparam>
            <param name="arg10">Value of the 10-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LogActivity`1">
            <summary>
            Represents a logged custom activity, i.e. something that has a beginning and an end with a specific outcome.
            This class is instantiated by the new API of the <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> class.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogActivity`1.Context">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.SetSuccess(PostSharp.Patterns.Diagnostics.CloseActivityOptions@)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.SetSuccess(PostSharp.Patterns.Diagnostics.CloseActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.SetResult``1(``0,PostSharp.Patterns.Diagnostics.CloseActivityOptions@)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.SetResult``1(``0,PostSharp.Patterns.Diagnostics.CloseActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.SetOutcome``1(PostSharp.Patterns.Diagnostics.LogLevel,``0@,System.Exception,PostSharp.Patterns.Diagnostics.CloseActivityOptions@)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.SetOutcome``1(PostSharp.Patterns.Diagnostics.LogLevel,``0@,System.Exception,PostSharp.Patterns.Diagnostics.CloseActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.SetException(System.Exception,PostSharp.Patterns.Diagnostics.CloseActivityOptions@)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.SetException(System.Exception,PostSharp.Patterns.Diagnostics.CloseActivityOptions@,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.Resume">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.Resume(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.Suspend">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogActivity`1.Suspend(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LogActivityKind">
            <summary>
            Kinds of <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Default">
            <summary>
            Default, created by <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String)"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.TaskLauncher">
            <summary>
            Activity of creating a <see cref="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Task"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Task">
            <summary>
            Code running in a <see cref="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Task"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Wait">
            <summary>
            Activity of waiting for a <see cref="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Task"/> or another dispatcher object.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.OutgoingRequest">
            <summary>
            An outgoing request. The property "RequestId" is expected to be defined.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.IncomingRequest">
            <summary>
            An incoming request of the service (typically a web request). A transaction boundary.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogActivityKind.Transaction">
            <summary>
            A custom transaction.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LogActivityOptions">
            <summary>
            Options of a new <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogActivityOptions.Default">
            <summary>
            Gets the default value of the <see cref="T:PostSharp.Patterns.Diagnostics.LogActivityOptions"/> type.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogActivityOptions.Kind">
            <summary>
            Gets or sets the kind of <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogActivityOptions.IsAsync">
            <summary>
            Determines whether the new <see cref="T:PostSharp.Patterns.Diagnostics.LogActivityOptions"/> is async.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Logger">
            <summary>
            Allows to emit custom log records and define custom activities. This class is obsolete. Use <see cref="T:PostSharp.Patterns.Diagnostics.LogSource" /> for new developments.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Logger.IsOpenActivityEnabled">
             <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String,System.Type)">
            <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> for a given role and <see cref="T:System.Type"/>.
            </summary>
            <param name="role">The role name (see <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles"/> for a list of standard logging roles).</param>
            <param name="type">The type that will emit the records.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> for <paramref name="role"/> and <paramref name="type"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String)">
            <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> for a given role and for the calling type.
            </summary>
            <param name="role">The role name (see <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles"/> for a list of standard logging roles). The default value is <c>Custom</c>.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> for <paramref name="role"/> and the calling type.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.GetLogger(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String)">
            <summary>
            Writes a custom log record without parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            Writes a custom log record with an array of parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode.</c>)</param>
            <param name="args">An array of parameters.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String)">
            <summary>
            Writes a custom record without parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <param name="text">The text of the log record.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a custom record with an array of parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode.</c>)</param>
            <param name="args">An array of parameters.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[])">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[])">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)">
            <summary>
            Opens a custom activity with an optional description, but without parameters. 
            </summary>
            <param name="text">A description of the activity, or <c>null</c> to use the caller method name as the activity description.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,System.Object[])">
            <summary>
            Opens a custom activity with an array of parameters. 
            </summary>
            <param name="text">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <param name="args">An array of parameters.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,System.Object[])">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String,System.Object[],PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.ForCurrentContext">
             <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
            <summary>
            Determines whether logging is enabled in the current <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> for a given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.
            </summary>
            <param name="level">A <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.</param>
            <returns><c>true</c> if logging is enabled for <paramref name="level"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteExecutionPoint">
            <summary>
            Emits a log record with the source file and line of the caller.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteExecutionPoint(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.ToLogSource">
            <summary>
            Creates a <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> from the current legacy <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0)">
            <summary>
            Writes a custom log record with 1 parameter.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``1(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0)">
            <summary>
            Writes a custom log record with 1 parameter and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``1(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0)">
            <summary>
            Opens a custom activity with 1 parameter. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0)">
            <summary>
            Opens a custom activity with a description containing 1 parameter.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``1(System.String,``0,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1)">
            <summary>
            Writes a custom log record with 2 parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``2(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1)">
            <summary>
            Writes a custom log record with 2 parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``2(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1)">
            <summary>
            Opens a custom activity with 2 parameters. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1)">
            <summary>
            Opens a custom activity with a description containing 2 parameters.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``2(System.String,``0,``1,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2)">
            <summary>
            Writes a custom log record with 3 parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``3(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2)">
            <summary>
            Writes a custom log record with 3 parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``3(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2)">
            <summary>
            Opens a custom activity with 3 parameters. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2)">
            <summary>
            Opens a custom activity with a description containing 3 parameters.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``3(System.String,``0,``1,``2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3)">
            <summary>
            Writes a custom log record with 4 parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``4(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3)">
            <summary>
            Writes a custom log record with 4 parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``4(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3)">
            <summary>
            Opens a custom activity with 4 parameters. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3)">
            <summary>
            Opens a custom activity with a description containing 4 parameters.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``4(System.String,``0,``1,``2,``3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Writes a custom log record with 5 parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``5(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Writes a custom log record with 5 parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``5(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Opens a custom activity with 5 parameters. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Opens a custom activity with a description containing 5 parameters.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``5(System.String,``0,``1,``2,``3,``4,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Writes a custom log record with 6 parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``6(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Writes a custom log record with 6 parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``6(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Opens a custom activity with 6 parameters. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Opens a custom activity with a description containing 6 parameters.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``6(System.String,``0,``1,``2,``3,``4,``5,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Writes a custom log record with 7 parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``7(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Writes a custom log record with 7 parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``7(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Opens a custom activity with 7 parameters. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Opens a custom activity with a description containing 7 parameters.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``7(System.String,``0,``1,``2,``3,``4,``5,``6,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Writes a custom log record with 8 parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``8(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Writes a custom log record with 8 parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``8(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Opens a custom activity with 8 parameters. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Opens a custom activity with a description containing 8 parameters.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Writes a custom log record with 9 parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``9(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Writes a custom log record with 9 parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``9(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Opens a custom activity with 9 parameters. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Opens a custom activity with a description containing 9 parameters.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Writes a custom log record with 10 parameters.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
            <typeparam name="T10">Type of the 10-th parameter.</typeparam>
            <param name="arg10">Value of the 10-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.Write``10(PostSharp.Patterns.Diagnostics.LogLevel,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Writes a custom log record with 10 parameters and associates it with an <see cref="T:System.Exception"/>.
            </summary>
            <param name="level">The severity of the record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> or <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>).</param>
            <param name="formattingString">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated with the record.</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
            <typeparam name="T10">Type of the 10-th parameter.</typeparam>
            <param name="arg10">Value of the 10-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.WriteException``10(PostSharp.Patterns.Diagnostics.LogLevel,System.Exception,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Opens a custom activity with 10 parameters. 
            </summary>
            <param name="options">Options.</param>
            <param name="formattingString">The formatting string of the activity description, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}.</c>)</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
            <typeparam name="T10">Type of the 10-th parameter.</typeparam>
            <param name="arg10">Value of the 10-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(PostSharp.Patterns.Diagnostics.LogActivityOptions,System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Opens a custom activity with a description containing 10 parameters.
            </summary>
            <param name="formattingString">The description of the activity, including parameters (e.g. <c>Writing {LineCount} line(s) in file {Path}</c>).</param>
            <typeparam name="T1">Type of the first parameter.</typeparam>
            <param name="arg1">Value of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter.</typeparam>
            <param name="arg2">Value of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter.</typeparam>
            <param name="arg3">Value of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter.</typeparam>
            <param name="arg4">Value of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter.</typeparam>
            <param name="arg5">Value of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter.</typeparam>
            <param name="arg6">Value of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter.</typeparam>
            <param name="arg7">Value of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter.</typeparam>
            <param name="arg8">Value of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter.</typeparam>
            <param name="arg9">Value of the 9-th parameter.</param>
            <typeparam name="T10">Type of the 10-th parameter.</typeparam>
            <param name="arg10">Value of the 10-th parameter.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> representing the new activity.</returns>
            <remarks>The activity must be closed using <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>, <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>. </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <exclude />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <exclude />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder">
            <summary>
            Creates semantic messages composed of a message name and a list of properties given as name-value pairs. These messages are ideal for machine analysis.
            For more succinct code, consider including the <c>using static PostSharp.Patterns.Diagnostics.MessageBuilder</c> statement.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``1(System.String,System.String,``0)">
            <summary>
            Create a semantic message with 1 parameter (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``1(System.String,System.ValueTuple{System.String,``0}@)">
            <summary>
            Create a semantic message with 1 parameter.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``2(System.String,System.String,``0,System.String,``1)">
            <summary>
            Create a semantic message with 2 parameters (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameterName2">Name of the second parameter.</param>
            <param name="parameterValue2">Name of the second parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``2(System.String,System.ValueTuple{System.String,``0}@,System.ValueTuple{System.String,``1}@)">
            <summary>
            Create a semantic message with 2 parameters.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameter2">Name and value of the second parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``3(System.String,System.String,``0,System.String,``1,System.String,``2)">
            <summary>
            Create a semantic message with 3 parameters (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameterName2">Name of the second parameter.</param>
            <param name="parameterValue2">Name of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameterName3">Name of the third parameter.</param>
            <param name="parameterValue3">Name of the third parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``3(System.String,System.ValueTuple{System.String,``0}@,System.ValueTuple{System.String,``1}@,System.ValueTuple{System.String,``2}@)">
            <summary>
            Create a semantic message with 3 parameters.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameter2">Name and value of the second parameter wrapped as a tuple.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameter3">Name and value of the third parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``4(System.String,System.String,``0,System.String,``1,System.String,``2,System.String,``3)">
            <summary>
            Create a semantic message with 4 parameters (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameterName2">Name of the second parameter.</param>
            <param name="parameterValue2">Name of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameterName3">Name of the third parameter.</param>
            <param name="parameterValue3">Name of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameterName4">Name of the 4-th parameter.</param>
            <param name="parameterValue4">Name of the 4-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``4(System.String,System.ValueTuple{System.String,``0}@,System.ValueTuple{System.String,``1}@,System.ValueTuple{System.String,``2}@,System.ValueTuple{System.String,``3}@)">
            <summary>
            Create a semantic message with 4 parameters.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameter2">Name and value of the second parameter wrapped as a tuple.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameter3">Name and value of the third parameter wrapped as a tuple.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameter4">Name and value of the 4-th parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``5(System.String,System.String,``0,System.String,``1,System.String,``2,System.String,``3,System.String,``4)">
            <summary>
            Create a semantic message with 5 parameters (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameterName2">Name of the second parameter.</param>
            <param name="parameterValue2">Name of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameterName3">Name of the third parameter.</param>
            <param name="parameterValue3">Name of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameterName4">Name of the 4-th parameter.</param>
            <param name="parameterValue4">Name of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameterName5">Name of the 5-th parameter.</param>
            <param name="parameterValue5">Name of the 5-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``5(System.String,System.ValueTuple{System.String,``0}@,System.ValueTuple{System.String,``1}@,System.ValueTuple{System.String,``2}@,System.ValueTuple{System.String,``3}@,System.ValueTuple{System.String,``4}@)">
            <summary>
            Create a semantic message with 5 parameters.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameter2">Name and value of the second parameter wrapped as a tuple.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameter3">Name and value of the third parameter wrapped as a tuple.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameter4">Name and value of the 4-th parameter wrapped as a tuple.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameter5">Name and value of the 5-th parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``6(System.String,System.String,``0,System.String,``1,System.String,``2,System.String,``3,System.String,``4,System.String,``5)">
            <summary>
            Create a semantic message with 6 parameters (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameterName2">Name of the second parameter.</param>
            <param name="parameterValue2">Name of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameterName3">Name of the third parameter.</param>
            <param name="parameterValue3">Name of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameterName4">Name of the 4-th parameter.</param>
            <param name="parameterValue4">Name of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameterName5">Name of the 5-th parameter.</param>
            <param name="parameterValue5">Name of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameterName6">Name of the 6-th parameter.</param>
            <param name="parameterValue6">Name of the 6-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``6(System.String,System.ValueTuple{System.String,``0}@,System.ValueTuple{System.String,``1}@,System.ValueTuple{System.String,``2}@,System.ValueTuple{System.String,``3}@,System.ValueTuple{System.String,``4}@,System.ValueTuple{System.String,``5}@)">
            <summary>
            Create a semantic message with 6 parameters.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameter2">Name and value of the second parameter wrapped as a tuple.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameter3">Name and value of the third parameter wrapped as a tuple.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameter4">Name and value of the 4-th parameter wrapped as a tuple.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameter5">Name and value of the 5-th parameter wrapped as a tuple.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameter6">Name and value of the 6-th parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``7(System.String,System.String,``0,System.String,``1,System.String,``2,System.String,``3,System.String,``4,System.String,``5,System.String,``6)">
            <summary>
            Create a semantic message with 7 parameters (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameterName2">Name of the second parameter.</param>
            <param name="parameterValue2">Name of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameterName3">Name of the third parameter.</param>
            <param name="parameterValue3">Name of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameterName4">Name of the 4-th parameter.</param>
            <param name="parameterValue4">Name of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameterName5">Name of the 5-th parameter.</param>
            <param name="parameterValue5">Name of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameterName6">Name of the 6-th parameter.</param>
            <param name="parameterValue6">Name of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter value.</typeparam>
            <param name="parameterName7">Name of the 7-th parameter.</param>
            <param name="parameterValue7">Name of the 7-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``7(System.String,System.ValueTuple{System.String,``0}@,System.ValueTuple{System.String,``1}@,System.ValueTuple{System.String,``2}@,System.ValueTuple{System.String,``3}@,System.ValueTuple{System.String,``4}@,System.ValueTuple{System.String,``5}@,System.ValueTuple{System.String,``6}@)">
            <summary>
            Create a semantic message with 7 parameters.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameter2">Name and value of the second parameter wrapped as a tuple.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameter3">Name and value of the third parameter wrapped as a tuple.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameter4">Name and value of the 4-th parameter wrapped as a tuple.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameter5">Name and value of the 5-th parameter wrapped as a tuple.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameter6">Name and value of the 6-th parameter wrapped as a tuple.</param>
            <typeparam name="T7">Type of the 7-th parameter value.</typeparam>
            <param name="parameter7">Name and value of the 7-th parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``8(System.String,System.String,``0,System.String,``1,System.String,``2,System.String,``3,System.String,``4,System.String,``5,System.String,``6,System.String,``7)">
            <summary>
            Create a semantic message with 8 parameters (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameterName2">Name of the second parameter.</param>
            <param name="parameterValue2">Name of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameterName3">Name of the third parameter.</param>
            <param name="parameterValue3">Name of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameterName4">Name of the 4-th parameter.</param>
            <param name="parameterValue4">Name of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameterName5">Name of the 5-th parameter.</param>
            <param name="parameterValue5">Name of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameterName6">Name of the 6-th parameter.</param>
            <param name="parameterValue6">Name of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter value.</typeparam>
            <param name="parameterName7">Name of the 7-th parameter.</param>
            <param name="parameterValue7">Name of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter value.</typeparam>
            <param name="parameterName8">Name of the 8-th parameter.</param>
            <param name="parameterValue8">Name of the 8-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``8(System.String,System.ValueTuple{System.String,``0}@,System.ValueTuple{System.String,``1}@,System.ValueTuple{System.String,``2}@,System.ValueTuple{System.String,``3}@,System.ValueTuple{System.String,``4}@,System.ValueTuple{System.String,``5}@,System.ValueTuple{System.String,``6}@,System.ValueTuple{System.String,``7}@)">
            <summary>
            Create a semantic message with 8 parameters.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameter2">Name and value of the second parameter wrapped as a tuple.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameter3">Name and value of the third parameter wrapped as a tuple.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameter4">Name and value of the 4-th parameter wrapped as a tuple.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameter5">Name and value of the 5-th parameter wrapped as a tuple.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameter6">Name and value of the 6-th parameter wrapped as a tuple.</param>
            <typeparam name="T7">Type of the 7-th parameter value.</typeparam>
            <param name="parameter7">Name and value of the 7-th parameter wrapped as a tuple.</param>
            <typeparam name="T8">Type of the 8-th parameter value.</typeparam>
            <param name="parameter8">Name and value of the 8-th parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``9(System.String,System.String,``0,System.String,``1,System.String,``2,System.String,``3,System.String,``4,System.String,``5,System.String,``6,System.String,``7,System.String,``8)">
            <summary>
            Create a semantic message with 9 parameters (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameterName2">Name of the second parameter.</param>
            <param name="parameterValue2">Name of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameterName3">Name of the third parameter.</param>
            <param name="parameterValue3">Name of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameterName4">Name of the 4-th parameter.</param>
            <param name="parameterValue4">Name of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameterName5">Name of the 5-th parameter.</param>
            <param name="parameterValue5">Name of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameterName6">Name of the 6-th parameter.</param>
            <param name="parameterValue6">Name of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter value.</typeparam>
            <param name="parameterName7">Name of the 7-th parameter.</param>
            <param name="parameterValue7">Name of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter value.</typeparam>
            <param name="parameterName8">Name of the 8-th parameter.</param>
            <param name="parameterValue8">Name of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter value.</typeparam>
            <param name="parameterName9">Name of the 9-th parameter.</param>
            <param name="parameterValue9">Name of the 9-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``9(System.String,System.ValueTuple{System.String,``0}@,System.ValueTuple{System.String,``1}@,System.ValueTuple{System.String,``2}@,System.ValueTuple{System.String,``3}@,System.ValueTuple{System.String,``4}@,System.ValueTuple{System.String,``5}@,System.ValueTuple{System.String,``6}@,System.ValueTuple{System.String,``7}@,System.ValueTuple{System.String,``8}@)">
            <summary>
            Create a semantic message with 9 parameters.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameter2">Name and value of the second parameter wrapped as a tuple.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameter3">Name and value of the third parameter wrapped as a tuple.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameter4">Name and value of the 4-th parameter wrapped as a tuple.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameter5">Name and value of the 5-th parameter wrapped as a tuple.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameter6">Name and value of the 6-th parameter wrapped as a tuple.</param>
            <typeparam name="T7">Type of the 7-th parameter value.</typeparam>
            <param name="parameter7">Name and value of the 7-th parameter wrapped as a tuple.</param>
            <typeparam name="T8">Type of the 8-th parameter value.</typeparam>
            <param name="parameter8">Name and value of the 8-th parameter wrapped as a tuple.</param>
            <typeparam name="T9">Type of the 9-th parameter value.</typeparam>
            <param name="parameter9">Name and value of the 9-th parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``10(System.String,System.String,``0,System.String,``1,System.String,``2,System.String,``3,System.String,``4,System.String,``5,System.String,``6,System.String,``7,System.String,``8,System.String,``9)">
            <summary>
            Create a semantic message with 10 parameters (using tuples).
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameterName1">Name of the first parameter.</param>
            <param name="parameterValue1">Name of the first parameter.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameterName2">Name of the second parameter.</param>
            <param name="parameterValue2">Name of the second parameter.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameterName3">Name of the third parameter.</param>
            <param name="parameterValue3">Name of the third parameter.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameterName4">Name of the 4-th parameter.</param>
            <param name="parameterValue4">Name of the 4-th parameter.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameterName5">Name of the 5-th parameter.</param>
            <param name="parameterValue5">Name of the 5-th parameter.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameterName6">Name of the 6-th parameter.</param>
            <param name="parameterValue6">Name of the 6-th parameter.</param>
            <typeparam name="T7">Type of the 7-th parameter value.</typeparam>
            <param name="parameterName7">Name of the 7-th parameter.</param>
            <param name="parameterValue7">Name of the 7-th parameter.</param>
            <typeparam name="T8">Type of the 8-th parameter value.</typeparam>
            <param name="parameterName8">Name of the 8-th parameter.</param>
            <param name="parameterValue8">Name of the 8-th parameter.</param>
            <typeparam name="T9">Type of the 9-th parameter value.</typeparam>
            <param name="parameterName9">Name of the 9-th parameter.</param>
            <param name="parameterValue9">Name of the 9-th parameter.</param>
            <typeparam name="T10">Type of the 10-th parameter value.</typeparam>
            <param name="parameterName10">Name of the 10-th parameter.</param>
            <param name="parameterValue10">Name of the 10-th parameter.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic``10(System.String,System.ValueTuple{System.String,``0}@,System.ValueTuple{System.String,``1}@,System.ValueTuple{System.String,``2}@,System.ValueTuple{System.String,``3}@,System.ValueTuple{System.String,``4}@,System.ValueTuple{System.String,``5}@,System.ValueTuple{System.String,``6}@,System.ValueTuple{System.String,``7}@,System.ValueTuple{System.String,``8}@,System.ValueTuple{System.String,``9}@)">
            <summary>
            Create a semantic message with 10 parameters.
            </summary>
            <param name="name">Name of the message.</param>
            <typeparam name="T1">Type of the first parameter value.</typeparam>
            <param name="parameter1">Name and value of the first parameter wrapped as a tuple.</param>
            <typeparam name="T2">Type of the second parameter value.</typeparam>
            <param name="parameter2">Name and value of the second parameter wrapped as a tuple.</param>
            <typeparam name="T3">Type of the third parameter value.</typeparam>
            <param name="parameter3">Name and value of the third parameter wrapped as a tuple.</param>
            <typeparam name="T4">Type of the 4-th parameter value.</typeparam>
            <param name="parameter4">Name and value of the 4-th parameter wrapped as a tuple.</param>
            <typeparam name="T5">Type of the 5-th parameter value.</typeparam>
            <param name="parameter5">Name and value of the 5-th parameter wrapped as a tuple.</param>
            <typeparam name="T6">Type of the 6-th parameter value.</typeparam>
            <param name="parameter6">Name and value of the 6-th parameter wrapped as a tuple.</param>
            <typeparam name="T7">Type of the 7-th parameter value.</typeparam>
            <param name="parameter7">Name and value of the 7-th parameter wrapped as a tuple.</param>
            <typeparam name="T8">Type of the 8-th parameter value.</typeparam>
            <param name="parameter8">Name and value of the 8-th parameter wrapped as a tuple.</param>
            <typeparam name="T9">Type of the 9-th parameter value.</typeparam>
            <param name="parameter9">Name and value of the 9-th parameter wrapped as a tuple.</param>
            <typeparam name="T10">Type of the 10-th parameter value.</typeparam>
            <param name="parameter10">Name and value of the 10-th parameter wrapped as a tuple.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Creates a semantic message with an arbitrary number of parameters.
            </summary>
            <param name="messageName">Message name.</param>
            <param name="parameters">Array of parameters (name-value pairs).</param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic(System.String,System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Creates a semantic message with an arbitrary number of parameters.
            </summary>
            <param name="messageName">Message name.</param>
            <param name="parameters">Array of parameters (name-value pairs).</param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.SemanticMessageBuilder.Semantic(System.String)">
            <summary>
            Creates a semantic message without parameter.
            </summary>
            <param name="messageName">Message name.</param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LoggerFactoryExtensions">
            <summary>
            Extension methods for the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory"/> interface.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggerFactoryExtensions.GetLogSource(PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory2,System.Type)">
            <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for a given role and <see cref="T:System.Type"/>.
            </summary>
            <param name="factory">An <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory"/>.</param>
            <param name="type">The type that will emit the records.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for <paramref name="type"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggerFactoryExtensions.GetLogSource(PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory3,System.Type)">
            <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for a given role and <see cref="T:System.Type"/>.
            </summary>
            <param name="factory">An <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory"/>.</param>
            <param name="type">The type that will emit the records.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for <paramref name="type"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggerFactoryExtensions.GetLogSource(PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory3,System.String)">
            <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for a given role and <paramref name="sourceName"/>.
            </summary>
            <param name="factory">An <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory3"/>.</param>
            <param name="sourceName">Log source name to be used by the backend. Not all backends support creating sources by name.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for <paramref name="sourceName"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggerFactoryExtensions.GetLogSource(PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory2)">
            <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> for a given role and for the calling type.
            </summary>
            <param name="factory">An <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory"/>.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> for the calling type.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggerFactoryExtensions.GetLogSource(PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory2,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggerFactoryExtensions.GetLogSource(PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory3)">
            <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> for a given role and for the calling type.
            </summary>
            <param name="factory">An <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory"/>.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> for the calling type.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggerFactoryExtensions.GetLogSource(PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory3,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LoggingProperty">
            <summary>
            Represents a property (a name, a value and a few options).
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LoggingProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LoggingProperty.Value">
            <summary>
            Gets the property value. The property is never rendered when the value is <c>null</c>.
            If the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProperty"/> has been initialized with a <c>Func&lt;object&gt;</c>, this property
            will evaluate the delegate every time the property getter is invoked.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LoggingProperty.Formatter">
            <summary>
            Gets or sets the formatter used to render the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProperty.Value"/> as a string. By default, the default formatter
            for the property value type is used.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LoggingProperty.IsRendered">
            <summary>
            Determines whether the property will be included in the log message. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LoggingProperty.IsInherited">
            <summary>
            Determines whether the property is inherited from the parent activity to children activities and messages. The default value is <c>true</c>.
             When this property is set to <c>false</c>, <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProperty.IsBaggage"/> is automatically set to <c>false</c>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LoggingProperty.IsBaggage">
            <summary>
            Determines whether the property is cross-process. The default value is <c>false</c>. When this property is set to <c>true</c>, <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProperty.IsInherited"/> is automatically
            set to <c>true</c>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggingProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProperty"/> and assigns it to a constant value.
            </summary>
            <param name="name">Property name.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggingProperty.#ctor(System.String,System.Func{System.Object})">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProperty"/> and assigns it to a dynamic value.
            </summary>
            <param name="name">Property name.</param>
            <param name="func">A function returning the property value. This function will be evaluated every time the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProperty.Value"/> getter is invoked.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LoggingProperty.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LoggingRoles">
            <summary>
            List of standard logging roles.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Caching">
            <summary>
            Log records emitted by the Caching component.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Tracing">
            <summary>
            Default role for the Logging component.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Audit">
            <summary>
            Audit.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Meta">
            <summary>
            Logging of the logging component itself.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Custom">
            <summary>
            Default role for custom logging using the <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> class.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LogLevel">
            <summary>
            Specifies the severity of a logged message.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.None">
            <summary>
            No message should be logged.
            </summary>
            <remarks>The value is <c>0</c>.</remarks>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Trace">
            <summary>
            The message should be logged at Trace level (when applicable).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Debug">
            <summary>
            The message should be logged at Debug level (when applicable).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Info">
            <summary>
            The message should be logged at Info level (when applicable).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning">
            <summary>
            The message should be logged at Warning level (when applicable).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Error">
            <summary>
            The message should be logged at Error level (when applicable).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogLevel.Critical">
            <summary>
            The message should be logged at Critical level (when applicable).
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LogRecordKind">
            <summary>
            Kinds of log entry.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.None">
            <summary>
            The value was not set.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodEntry">
            <summary>
            Before method execution.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodSuccess">
            <summary>
            After successful method execution.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodException">
            <summary>
            After failed method execution (the method threw an exception).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.AsyncMethodAwait">
            <summary>
            Before async method suspends execution.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.AsyncMethodResume">
            <summary>
            After async method resumes execution.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.ValueChanged">
            <summary>
            When value of a field or property changes.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomRecord">
            <summary>
            Custom record (emitted by <see cref="M:PostSharp.Patterns.Diagnostics.Logger.Write(PostSharp.Patterns.Diagnostics.LogLevel,System.String)"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivityEntry">
            <summary>
            Before a custom activity (emitted by <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)"/> or <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)"/>).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivityException">
            <summary>
            When a custom activity fails with an exception (emitted by <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetException(System.Exception)"/>).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivitySuccess">
            <summary>
            When a custom activity succeeds (emitted by <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetSuccess(System.String)"/>).
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivityFailure">
            <summary>
            When a custom activity fails with a custom message (emitted by <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.IteratorYield">
            <summary>
            When an iterator yields a result.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.IteratorMoveNext">
            <summary>
            Before the <see cref="M:System.Collections.IEnumerator.MoveNext"/> method of an iterator executes.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.ExecutionPoint">
            <summary>
            Emitted by <see cref="M:PostSharp.Patterns.Diagnostics.Logger.WriteExecutionPoint"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodOvertime">
            <summary>
            After a method execution is successful but lasted more time than the threshold.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomActivityExit">
            <summary>
            Any exit of a custom activity, where it is not known whether the execution succeeded or failed.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions">
            <summary>
            Extensions to the <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/> enum.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions.IsOpen(PostSharp.Patterns.Diagnostics.LogRecordKind)">
            <summary>
            Determines whether a given <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/> represents the opening of a context.
            </summary>
            <param name="kind">A <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/>.</param>
            <returns><c>true</c> if <paramref name="kind"/> represents the opening of a context, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions.IsClose(PostSharp.Patterns.Diagnostics.LogRecordKind)">
            <summary>
            Determines whether a given <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/> represents the closing of a context.
            </summary>
            <param name="kind">A <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/>.</param>
            <returns><c>true</c> if <paramref name="kind"/> represents the closing of a context, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions.IsCloseCustomActivity(PostSharp.Patterns.Diagnostics.LogRecordKind)">
            <summary>
            Determines whether a given <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/> represents the closing of a custom activity.
            </summary>
            <param name="kind">A <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/>.</param>
            <returns><c>true</c> if <paramref name="kind"/> represents the closing of a custom activity, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions.IsStandalone(PostSharp.Patterns.Diagnostics.LogRecordKind)">
            <summary>
            Determines whether a given <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/> represents a standalone record, i.e. a record that does
            not have a corresponding opening or closing. For instance, a <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.CustomRecord"/>
            is a standalone record.
            </summary>
            <param name="kind">A <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/>.</param>
            <returns><c>true</c> if <paramref name="kind"/> is a standalone record, otherwise <c>false</c>.</returns>
            <remarks>
            <para><seealso cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodException"/> may represent an closing or a standalone record, depending on
            the context. This method shall return <c>false</c> for <seealso cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodException"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogRecordKindExtensions.IsCustom(PostSharp.Patterns.Diagnostics.LogRecordKind)">
            <summary>
            Determines whether a give <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/> represents a custom record, emitted by the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class.
            </summary>
            <param name="kind">A <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind"/>.</param>
            <returns><c>true</c> if <paramref name="kind"/> is a custom kind of record emitted by the <see cref="T:PostSharp.Patterns.Diagnostics.Logger"/> class,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.LogSource">
            <summary>
            Allow to write log messages and trace the execution of activities. This class is optimized for use with C# 7.2 or later.
            For previous compiler versions, consider using the legacy <see cref="P:PostSharp.Patterns.Diagnostics.LogSource.Logger"/> class.
            </summary>
            <remarks>
            <para>
            Instances of this class are immutable. 
            </para>
            <para>
            You should typically have one instance of this class per type.
            Use <see cref="M:PostSharp.Patterns.Diagnostics.LogSource.Get"/> or <see cref="M:PostSharp.Patterns.Diagnostics.LoggerFactoryExtensions.GetLogSource(PostSharp.Patterns.Diagnostics.Custom.ILoggerFactory2,System.Type)"/> to get an instance of this class for the current type.
            </para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.CurrentContext">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.ForType(System.Type)">
            <summary>
            Gets a new <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> keeping all the configuration of the current instance, but for a different type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which the <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> should be created.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for <paramref name="type"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.ForSource(System.String)">
            <summary>
            Gets a new <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> keeping all the configuration of the current instance, but for a source name.
            </summary>
            <param name="sourceName">The name of the source for which the <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> should be created.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for <paramref name="sourceName"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.ForCurrentType">
            <summary>
            Gets a new <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> keeping all the configuration of the current instance, but for the calling type.
            </summary>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for the calling type.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.ForCurrentType(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.Get">
            <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for the calling type.
            </summary>
            <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for the calling type.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.Get(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.Get(System.String)">
            <summary>
            Gets a log source associated with a specific source name.
            </summary>
            <param name="sourceName">Name that the logging backend associates with a log source.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.Get(System.String,System.String)">
            <summary>
            Gets a log source for a specified role and source name.
            </summary>
            <param name="role">A role name. See <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles"/>.</param>
            <param name="sourceName">The source name. A dotted name.</param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.Get(System.Type,System.String)">
            <summary>
            Gets a log source for a specified role and <see cref="T:System.Type"/>.
            </summary>
            <param name="role">See <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles"/>.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
            <summary>
            Determines whether logging is enabled in the current <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> for a given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.
            </summary>
            <param name="level">A <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.</param>
            <returns><c>true</c> if logging is enabled for <paramref name="level"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.WithLevel(PostSharp.Patterns.Diagnostics.LogLevel)">
            <summary>
            Exposes methods that allow to write messages and open activities with a specified <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.
            </summary>
            <param name="level">The desired <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/>.</param>
            <returns>A fluent API object that allows to write messages with the specified <paramref name="level"/>.</returns>
            <remarks>
              <para>This method is properly optimized. Subsequent calls with the same parameter value will return the same instance.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.WithLevels(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogLevel)">
            <summary>
            Returns a new <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> based on the current instance, but overrides the default logging levels.
            </summary>
            <param name="defaultLevel">The <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/> for the <see cref="P:PostSharp.Patterns.Diagnostics.LogSource.Default"/> severity (also used for the start and success messages of activities).</param>
            <param name="failureLevel">The <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel"/> for the <see cref="P:PostSharp.Patterns.Diagnostics.LogSource.Failure"/> severity (also used for the failure messages of activities).</param>
            <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/> with the specified log levels.</returns>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.None">
            <summary>
            Exposes methods that allow to open activities with the <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.None"/> severity. Such activities are never displayed,
            but they can define properties that can be inherited to children activities and messages.
            </summary>
            <remarks>
              <para>This property is properly optimized. Subsequent calls will return the same instance.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.Default">
            <summary>
            Exposes methods that allow to write messages and open activities with the default severity of the current <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/>. The default severity is <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Debug"/>,
            unless it has been overwritten by the <see cref="M:PostSharp.Patterns.Diagnostics.LogSource.WithLevels(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogLevel)"/> method.
            </summary>
            <remarks>
              <para>This property is properly optimized. Subsequent calls will return the same instance.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.Failure">
            <summary>
            Exposes methods that allow to write messages and open activities with the default failure severity of the current <see cref="T:PostSharp.Patterns.Diagnostics.LogSource"/>. The default severity is <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/>,
            unless it has been overwritten by the <see cref="M:PostSharp.Patterns.Diagnostics.LogSource.WithLevels(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogLevel)"/> method.
            </summary>
            <remarks>
              <para>This property is properly optimized. Subsequent calls will return the same instance.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.Critical">
            <summary>
            Exposes methods that allow to write messages and open activities with the <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Critical"/> severity.
            </summary>
            <remarks>
              <para>This property is properly optimized. Subsequent calls will return the same instance.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.Error">
            <summary>
            Exposes methods that allow to write messages and open activities with the <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error"/> severity.
            </summary>
            <remarks>
              <para>This property is properly optimized. Subsequent calls will return the same instance.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.Warning">
            <summary>
            Exposes methods that allow to write messages and open activities with the <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning"/> severity.
            </summary>
            <remarks>
              <para>This property is properly optimized. Subsequent calls will return the same instance.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.Info">
            <summary>
            Exposes methods that allow to write messages and open activities with the <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info"/> severity.
            </summary>
            <remarks>
              <para>This property is properly optimized. Subsequent calls will return the same instance.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.Trace">
            <summary>
            Exposes methods that allow to write messages and open activities with the <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Trace"/> severity.
            </summary>
            <remarks>
              <para>This property is properly optimized. Subsequent calls will return the same instance.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.LogSource.Debug">
            <summary>
            Exposes methods that allow to write messages and open activities with the <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Debug"/> severity.
            </summary>
            <remarks>
              <para>This property is properly optimized. Subsequent calls will return the same instance.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.WriteExecutionPoint">
            <summary>
            Emits a log record with the source file and line of the caller.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.WriteExecutionPoint(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@)">
            <excludeOverload />
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.LogSource.ApplyTransactionRequirements(PostSharp.Patterns.Diagnostics.OpenActivityOptions@)">
            <summary>
            Evaluates whether a transaction needs to be open for a specified <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions"/> and updates
            its <see cref="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.TransactionRequirement"/> property.
            This method must be invoked before calling <see cref="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.OpenActivity``1(``0@,PostSharp.Patterns.Diagnostics.OpenActivityOptions@)"/>.
            It is not automatically called.
            </summary>
            <param name="openActivityOptions">The options of the activity to be opened. This method updates the 
            <see cref="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.TransactionRequirement"/> property of this parameter.</param>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions">
            <summary>
            Argument of the  <see cref="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.OpenActivity``1(``0@,PostSharp.Patterns.Diagnostics.OpenActivityOptions@)"/> method.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.OpenActivityOptions.#ctor(System.Object,PostSharp.Patterns.Diagnostics.LogActivityKind)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions"/> and specifies properties using an arbitrary object 
            (possibly of an anonymous class).
            </summary>
            <param name="kind">Optional. The kind of activity.</param>
            <param name="data">Optional. Specifies the properties of the <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions"/>, typically specified as an instance of a well-known or anonymous CLR type.
            The resulting <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> will have the default <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>, which means that all CLR properties will be exposed
            as logging properties unless they are annotated with <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptionsAttribute"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.OpenActivityOptions.#ctor(PostSharp.Patterns.Diagnostics.Custom.LogEventData@,PostSharp.Patterns.Diagnostics.LogActivityKind)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions"/> and specifies properties using a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.
            </summary>
            <param name="kind">Optional. The kind of activity.</param>
            <param name="data">Optional. Specifies the properties of the <see cref="T:PostSharp.Patterns.Diagnostics.WriteMessageOptions"/>. See <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.OpenActivityOptions.#ctor(PostSharp.Patterns.Diagnostics.LogActivityOptions@)">
            <summary>
            Converts a <see cref="T:PostSharp.Patterns.Diagnostics.LogActivityOptions"/> into an <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions"/>
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.IncomingRequestOptions">
            <summary>
            Gets or sets the logging options set by the remote caller of the request
            represented by the current <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.TransactionRequirement">
            <summary>
            Gets or sets the <see cref="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.TransactionRequirement"/> for the current activity. These requirements can be set
            by the caller of <see cref="M:PostSharp.Patterns.Diagnostics.Custom.LogLevelSource.OpenActivity``1(``0@,PostSharp.Patterns.Diagnostics.OpenActivityOptions@)"/> or
            by <see cref="M:PostSharp.Patterns.Diagnostics.LogSource.ApplyTransactionRequirements(PostSharp.Patterns.Diagnostics.OpenActivityOptions@)"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.IsSyntheticRootId">
            <summary>
            When the property value is <c>true</c>, the resulting activity will be assigned a global id, irrespective of the id generation strategy.
            This means that the resulting <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.SyntheticId"/> will be rooted by  the current activity. When this property is <c>false</c>,
            the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.SyntheticId"/> will may start with the id of the parent context. 
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.Kind">
            <summary>
            Gets or sets the kind of <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.Properties">
            <summary>
            Gets the activity properties. 
            </summary>
            <summary>
            Gets or sets the activity properties.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.Data">
            <summary>
            Specifies the properties of the <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions"/>, typically specified as an instance of a well-known or anonymous CLR type.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.SyntheticParentId">
            <summary>
            When this property is set to a non-null value, the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.SyntheticId"/> property shall use this
            property as the parent identifier, instead of recursively building the synthetic identifier based on the parent context. 
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.OpenActivityOptions.SyntheticRootId">
             <summary>
             When this property  is set to a non-null value, the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext.SyntheticId"/> property shall return the
            the value of this property, instead of starting with the id of the parent context. 
             </summary>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement">
            <summary>
            Represents the decision whether, why and how a transaction must be opened for an activity.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement.IsSampled">
            <summary>
            Determines whether the transaction must be opened based on a sampling policy.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement.RequiresTransaction">
            <summary>
            Determines whether the activity requires a transaction to be opened.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement.SampledTransaction">
            <summary>
            Represents the request to open a transaction based on a sampling policy.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement.DeterministicTransaction">
            <summary>
            Represents the request to open a transaction based on a deterministic policy (without sampling).
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement.NoTransaction">
            <summary>
            Represents the absence of request to open a transaction.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement.WithRequiresTransaction(System.Boolean)">
            <summary>
            Returns a copy of the current <see cref="T:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement"/> but with a different value of <see cref="P:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement.RequiresTransaction"/>.
            Specifically, this method preserves the <see cref="P:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement.IsSampled"/> property if the <paramref name="value"/> parameter is <c>true</c>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.Transactions.TransactionRequirement.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Diagnostics.WriteMessageOptions">
            <summary>
            Options for the <see cref="T:System.Exception"/> method.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.WriteMessageOptions.#ctor(System.Object)">
            <summary>
            Initializes a <see cref="T:PostSharp.Patterns.Diagnostics.WriteMessageOptions"/> and optionally specifies the properties given a CLR object.
            </summary>
            <param name="data">Optional. Specifies the properties of the <see cref="T:PostSharp.Patterns.Diagnostics.WriteMessageOptions"/>, typically specified as an instance of a well-known or anonymous CLR type.
            The resulting <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/> will have the default <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventMetadata"/>, which means that all CLR properties will be exposed
            as logging properties unless they are annotated with <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LoggingPropertyOptionsAttribute"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Diagnostics.WriteMessageOptions.#ctor(PostSharp.Patterns.Diagnostics.Custom.LogEventData@)">
            <summary>
            Initializes a <see cref="T:PostSharp.Patterns.Diagnostics.WriteMessageOptions"/> and optionally specifies the properties given a <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.
            </summary>
            <param name="data">Optional. Specifies the properties of the <see cref="T:PostSharp.Patterns.Diagnostics.WriteMessageOptions"/>. See <see cref="T:PostSharp.Patterns.Diagnostics.Custom.LogEventData"/>.</param>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.WriteMessageOptions.Properties">
            <summary>
            Gets the activity properties. 
            </summary>
            <summary>
            Gets or sets the activity properties.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Diagnostics.WriteMessageOptions.Data">
            <summary>
            Specifies the properties of the <see cref="T:PostSharp.Patterns.Diagnostics.WriteMessageOptions"/>, typically specified as an instance of a well-known or anonymous CLR type.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1">
            <summary>
            An immutable iterators of dynamic advices <see cref="T:PostSharp.Patterns.DynamicAdvising.IDynamicAdvice"/>.
            The <see cref="M:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1.GetNext"/> method returns a new enumerator instance.
            </summary>
            <typeparam name="T">The advice interface.</typeparam>
        </member>
        <member name="P:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1.HasValue">
            <summary>
            Determines whether the current enumerator has a <see cref="P:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1.Current"/> value.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1.GetNext">
            <summary>
            Gets a new instance of <see cref="T:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1"/> that points to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.DynamicAdvice">
            <summary>
            A base implementation of the <see cref="T:PostSharp.Patterns.DynamicAdvising.IDynamicAdvice"/> interface.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicAdvice.#ctor(PostSharp.Patterns.DynamicAdvising.IQueryInterface)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.DynamicAdvising.DynamicAdvice"/>.
            </summary>
            <param name="parent">The advised object.</param>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicAdvice.QueryInterface``1">
            <inheritdoc/>
        </member>
        <member name="P:PostSharp.Patterns.DynamicAdvising.DynamicAdvice.Order">
            <inheritdoc/>
        </member>
        <member name="P:PostSharp.Patterns.DynamicAdvising.DynamicAdvice.PostSharp#Patterns#DynamicAdvising#IDynamicInterfaceImplementation#AdvisedObject">
            <inheritdoc/>
        </member>
        <member name="P:PostSharp.Patterns.DynamicAdvising.DynamicAdvice.AdvisedObject">
            <summary>
            Gets the advised object.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicAdvice.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:PostSharp.Patterns.DynamicAdvising.DynamicAdvice.Identity">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicAdvice.Initialize(PostSharp.Patterns.DynamicAdvising.IQueryInterface,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.DynamicAdvising.IDynamicAdvice})">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.DynamicAdviceOrder">
            <summary>
            Order of dynamic advices.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.DynamicAdvising.DynamicAdviceOrder.Aggregatable">
            <summary>
            Aggregatable.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.DynamicAdvising.DynamicAdviceOrder.Disposable">
            <summary>
            Disposable.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.DynamicAdvising.DynamicAdviceOrder.Threading">
            <summary>
            Threading models.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.DynamicAdvising.DynamicAdviceOrder.Recordable">
            <summary>
            Change tracking (recordable).
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.DynamicAdvisingServices">
            <summary>
            Provides methods to help with the use of dynamic advices.
            </summary>
            <seealso cref="T:PostSharp.Patterns.DynamicAdvising.IQueryInterface"/>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicAdvisingServices.QueryObject(System.Object)">
            <summary>
            Gets the principal object of an advice.
            </summary>
            <param name="obj">An object or a dynamic advice.</param>
            <returns>The <see cref="P:PostSharp.Patterns.DynamicAdvising.IDynamicInterfaceImplementation.AdvisedObject"/> is <paramref name="obj"/> is a dynamic advice, otherwise <paramref name="obj"/> itself.</returns>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicAdvisingServices.QueryInterface``1(System.Object,System.Boolean)">
            <summary>
            Gets the implementation of a specified interface for the specified object.
            </summary>
            <param name="obj">The object for which the interface should be queried.</param>
            <param name="throwing"><c>true</c> if the method should throw a <see cref="T:System.InvalidCastException"/> if <paramref name="obj"/> does not implement the
            <typeparamref name="T"/> interface, <c>false</c> if <c>null</c> be returned instead. The default value is <c>true</c>.</param>
            <typeparam name="T">The type of the required interface.</typeparam>
            <returns>An object implementing the <typeparamref name="T"/> interface on behalf of <paramref name="obj"/>, or <c>null</c>
            if <paramref name="obj"/> does not implement <typeparamref name="T"/> and <paramref name="throwing"/> is <c>true</c>.
            </returns>
            <remarks>
            <para>This method shall return <paramref name="obj"/> if the type of <paramref name="obj"/> statically implements the interface. Otherwise,
            the method shall return another object that implements <typeparamref name="T"/> on behalf of <paramref name="obj"/>. In  this case,
            the returned object shall implement the <see cref="T:PostSharp.Patterns.DynamicAdvising.IDynamicInterfaceImplementation"/> interface, which allows to navigate back to <paramref name="obj"/>.</para>
            </remarks>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject">
            <summary>
            Base class for objects into which advices can be dynamically injected.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject"/>. Constructors of derived classes are supposed to call the <see cref="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.InitializeAdvices(PostSharp.Patterns.DynamicAdvising.IExecuteActionDynamicAdvice)"/> too.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.InitializeAdvices(PostSharp.Patterns.DynamicAdvising.IExecuteActionDynamicAdvice)">
            <summary>
            Initializes the list of dynamic advices.
            </summary>
            <param name="advice">The last advice in the chain of responsibility, which does the actual work.</param>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.GetAdviceEnumerator``1">
            <summary>
            Gets an <see cref="T:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1"/> for all advices implementing a given interface on the current object.
            </summary>
            <typeparam name="T">Interface to be implemented by the advice</typeparam>
            <returns>An <see cref="T:PostSharp.Patterns.DynamicAdvising.AdviceEnumerator`1"/> that enumerates all advices of type <typeparamref name="T"/> on the current object.</returns>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.ExecuteWithAdvices``2(PostSharp.Patterns.Model.ObjectAccessLevel,``1@)">
            <summary>
            Executes an action wrapped by all custom advices added to the current object.
            </summary>
            <typeparam name="TResult">Type of return value.</typeparam>
            <typeparam name="TAction">Action type.</typeparam>
            <param name="objectAccessLevel">Required access level when executing <paramref name="action"/>.</param>
            <param name="action">The action to be executed.</param>
            <returns>The return value of <paramref name="action"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.DynamicallyAdvisableObject.OnDeserialization(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.IAction`1">
            <summary>
            Exposes an <see cref="M:PostSharp.Patterns.DynamicAdvising.IAction`1.Execute"/> method.
            </summary>
            <typeparam name="TResult">Return type of the <see cref="M:PostSharp.Patterns.DynamicAdvising.IAction`1.Execute"/> method.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.IAction`1.Execute">
            <summary>
            Executes the action.
            </summary>
            <returns>Anything.</returns>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.IDynamicAdvice">
            <summary>
            Represents an advice that can be injected dynamically into a dynamically-advisable object.
            </summary>
            <remarks>
            <para>
            Dynamic advices form a chain of responsibility. Specific interfaces derived from <see cref="T:PostSharp.Patterns.DynamicAdvising.IDynamicAdvice"/> (e.g. <see cref="T:PostSharp.Patterns.Collections.Advices.ICollectionDynamicAdvice`1"/> or <see cref="T:PostSharp.Patterns.Collections.Advices.IDictionaryDynamicAdvice`2"/>)
            define the semantics of the corresponding specific advised type (e.g. <see cref="T:PostSharp.Patterns.Collections.AdvisableCollection`1"/> or <see cref="T:PostSharp.Patterns.Collections.AdvisableDictionary`2"/>. The last node in the chain of implementation
            is the actual collection implementation.
            </para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.IDynamicAdvice.QueryInterface``1">
            <summary>
            Gets the implementation of an interface.
            </summary>
            <typeparam name="T">Interface type.</typeparam>
            <returns>The implementation of interface <typeparamref name="T"/>, or <c>null</c> if the advice does not implement this interface.</returns>
        </member>
        <member name="P:PostSharp.Patterns.DynamicAdvising.IDynamicAdvice.Order">
            <summary>
            Gets the execution order of the dynamic advice. See <see cref="T:PostSharp.Patterns.DynamicAdvising.DynamicAdviceOrder"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.IDynamicAdvice.Dispose">
            <summary>
            Disposes the current advice. // We don't use IDisposable so that advises are not be cast to IDisposable by default.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.DynamicAdvising.IDynamicAdvice.Identity">
            <summary>
            Gets the type identity of the advice, which should correspond to the first parameter of the <see cref="M:PostSharp.Patterns.DynamicAdvising.IDynamicallyAdvisable.Advise(System.Type,System.Func{PostSharp.Patterns.DynamicAdvising.IQueryInterface,PostSharp.Patterns.DynamicAdvising.IDynamicAdvice})"/> method.
            This is typically the generic type definition of the advice
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.IDynamicAdvice.Initialize(PostSharp.Patterns.DynamicAdvising.IQueryInterface,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.DynamicAdvising.IDynamicAdvice})">
            <summary>
            Initializes the current advice.
            </summary>
            <param name="parent">The parent, dynamically-advisable object.</param>
            <param name="nextAdvice">The next advice in the chain.</param>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.IDynamicallyAdvisable">
            <summary>
            Defines the semantics of an object that accepts dynamic advices.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.IDynamicallyAdvisable.Advise(System.Type,System.Func{PostSharp.Patterns.DynamicAdvising.IQueryInterface,PostSharp.Patterns.DynamicAdvising.IDynamicAdvice})">
            <summary>
            Adds an advice to the object.
            </summary>
            <param name="type">The advice type identity.</param>
            <param name="createAdvice">A delegate that instantiates the advice if it has not yet been added to the object.</param>
            <returns><c>true</c> if the advice was added, <c>false</c> if it was already added.</returns>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.IDynamicallyAdvisable.Unadvise(System.Type)">
            <summary>
            Removes an advice from the object.
            </summary>
            <param name="type">The advice type identity.</param>
            <returns><c>true</c> if the advice was removed, <c>false</c> if it was not present.</returns>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.IDynamicallyAdvisable.QueryAdvice``1">
            <summary>
            Queries an interface implemented by a dynamic advice.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <returns>The interface implementation, or <c>null</c> if the object does not have an advice implementing <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.IDynamicInterfaceImplementation">
            <summary>
            Interface that must be implemented by objects implementing dynamic interfaces, which can be queried using <see cref="M:PostSharp.Patterns.DynamicAdvising.IQueryInterface.QueryInterface``1"/>.
            The <see cref="T:PostSharp.Patterns.DynamicAdvising.IDynamicInterfaceImplementation"/> interface provides a mean to get a reference back to the principal object.
            </summary>
            <see cref="T:PostSharp.Patterns.DynamicAdvising.IQueryInterface"/>
            <see cref="M:PostSharp.Patterns.DynamicAdvising.DynamicAdvisingServices.QueryInterface``1(System.Object,System.Boolean)"/>
            <see cref="M:PostSharp.Patterns.DynamicAdvising.DynamicAdvisingServices.QueryObject(System.Object)"/>
        </member>
        <member name="P:PostSharp.Patterns.DynamicAdvising.IDynamicInterfaceImplementation.AdvisedObject">
            <summary>
            Gets the principal object for which the current object is an indirect interface implementation.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.IExecuteActionDynamicAdvice">
            <summary>
            A dynamic advice around the execution of an action.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.IExecuteActionDynamicAdvice.Invoke``2(PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.DynamicAdvising.AdviceEnumerator{PostSharp.Patterns.DynamicAdvising.IExecuteActionDynamicAdvice},``1@)">
            <summary>
            Invokes the advice or the underlying method.
            </summary>
            <typeparam name="TResult">Type of the method result.</typeparam>
            <typeparam name="TAction">Type of the action.</typeparam>
            <param name="objectAccessLevel">The <see cref="T:PostSharp.Patterns.Model.ObjectAccessLevel"/> required by the action.</param>
            <param name="nextAdvice">Next advice.</param>
            <param name="action">The action to be executed.</param>
            <returns>The result of the underlying advice.</returns>
        </member>
        <member name="T:PostSharp.Patterns.DynamicAdvising.IQueryInterface">
            <summary>
            Interface implemented by objects that can implement interface dynamically by composition, without
            implementing the interface directly at MSIL level. The <see cref="M:PostSharp.Patterns.DynamicAdvising.IQueryInterface.QueryInterface``1"/> method
            must then be used instead of a normal cast.
            </summary>
            <seealso cref="T:PostSharp.Patterns.DynamicAdvising.IDynamicInterfaceImplementation"/>
            <seealso cref="T:PostSharp.Patterns.DynamicAdvising.QueryInterfaceExtensions"/>
        </member>
        <member name="M:PostSharp.Patterns.DynamicAdvising.IQueryInterface.QueryInterface``1">
            <summary>
            Gets the implementation of a specified interface for the current object.
            </summary>
            <typeparam name="T">The type of the required interface.</typeparam>
            <returns>An object implementing the <typeparamref name="T"/> interface on behalf of the current object, or <c>null</c>
            if the current object does not implement the <typeparamref name="T"/> interface.
            </returns>
            <remarks>
            <para>This method shall return the current object if the type of the current object statically implements the interface. Otherwise,
            the method shall return another object that implements <typeparamref name="T"/> on behalf of the current object. In  this case,
            the returned object shall implement the <see cref="T:PostSharp.Patterns.DynamicAdvising.IDynamicInterfaceImplementation"/> interface, which allows to navigate back to the current object.</para>
            <para>
            User code typically uses the <see cref="M:PostSharp.Patterns.DynamicAdvising.QueryInterfaceExtensions.QueryInterface``1(System.Object,System.Boolean)"/> extension method.
            </para>
            </remarks>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.AnonymousTypeFormatter`1">
            <summary>
            The formatted used to for anonymous types by default.
            </summary>
            <typeparam name="TKind">The formatting role.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.AnonymousTypeFormatter`1.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.AnonymousTypeFormatter`1"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">A type.</param>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.AnonymousTypeFormatter`1.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.AnonymousTypeFormatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.BooleanFormatter">
            <summary>
            A formatter for <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.BooleanFormatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.BooleanFormatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.BooleanFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.ByteFormatter">
            <summary>
            A formatter for <see cref="T:System.Byte"/> values.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.ByteFormatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.ByteFormatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.ByteFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Byte)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.CharFormatter">
            <summary>
            A formatter for <see cref="T:System.Char"/> values.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.CharFormatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.CharFormatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Char)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharFormatter.WithOptions(PostSharp.Patterns.Formatters.FormattingOptions)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.CharSpan">
            <summary>
            Represents a span of <see cref="T:System.Char"/> by encapsulating a substring or a range of a <see cref="T:System.Char"/> array.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.CharSpan.Length">
            <summary>
            Gets the number of <see cref="T:System.Char"/> in the span.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.CharSpan.IsNull">
            <summary>
            Determines whether the current instance represents a null string.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharSpan.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/> from an array of <see cref="T:System.Char"/>.
            </summary>
            <param name="array">An array of <see cref="T:System.Char"/>.</param>
            <param name="start">The start index of the span in the <paramref name="array"/>.</param>
            <param name="length">The number of characters in the span.</param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharSpan.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/> from a <see cref="T:System.String"/> and specifies the start and lenght of the substring.
            </summary>
            <param name="str">A string.</param>
            <param name="start">The index of the first character of the span in <paramref name="str"/>.</param>
            <param name="length">The number of characters in the span.</param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharSpan.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/> from a <see cref="T:System.String"/>, and takes the whole string.
            </summary>
            <param name="str">A string.</param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharSpan.op_Implicit(System.String)~PostSharp.Patterns.Formatters.CharSpan">
            <summary>
            Converts a <see cref="T:System.String"/> into a <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/>.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharSpan.FromString(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> into a <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/>.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharSpan.op_Implicit(System.ArraySegment{System.Char})~PostSharp.Patterns.Formatters.CharSpan">
            <summary>
            Converts an <see cref="T:System.ArraySegment`1"/> into a <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/>.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharSpan.FromArraySegment(System.ArraySegment{System.Char})">
            <summary>
            Converts a <see cref="T:System.String"/> into a <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/>.
            </summary>
            <param name="str"></param>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.CharSpan.IsBackedByCharArray">
            <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/> is backed by a <c>char[]</c>. In this case,
            the <see cref="M:PostSharp.Patterns.Formatters.CharSpan.ToCharArraySegment"/> method does not allocate memory.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharSpan.ToString">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.CharSpan.ToCharArraySegment">
            <summary>
            Converts the current <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/> into an <see cref="T:System.ArraySegment`1"/> of <see cref="T:System.Char"/>.
            When the <see cref="P:PostSharp.Patterns.Formatters.CharSpan.IsBackedByCharArray"/> or <see cref="P:PostSharp.Patterns.Formatters.CharSpan.IsNull"/> property is <c>true</c>, this method does not allocate memory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.DefaultFormatter`2">
            <summary>
            The default formatter that formats objects by calling <see cref="M:System.Object.ToString"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.DefaultFormatter`2.Instance">
            <summary>
            Gets the default instance of the <see cref="T:PostSharp.Patterns.Formatters.DefaultFormatter`2"/> class.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.DefaultFormatter`2.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.DefaultFormatter`2"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.DefaultFormatter`2.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.DefaultFormatter`2.WithOptions(PostSharp.Patterns.Formatters.FormattingOptions)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Formatters.DefaultFormatter`2.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,`1)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.EnumFormatter`1">
            <summary>
            Efficient formatter for enums.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.EnumFormatter`1.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.EnumFormatter`1"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.EnumFormatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Formatters.EnumFormatter`1.GetString(`0)">
            <summary>
            Returns the string value of the given enum value.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.EnumFormatter">
            <summary>
            Efficient formatter for enums.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.EnumFormatter.GetString``1(``0)">
            <summary>
            Returns the string value of the given enum value.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.FormatterRepository`1">
            <summary>
            Allows to get and register formatters for a specific type.
            </summary>
            <typeparam name="TRole">Marker type used to differentiate FormattingServices for different purposes (e.g. caching or logging).</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.FormatterRepository`1"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.SetDynamic``1">
            <summary>
            Requests that formatters for parameters of a given type will be resolved according
            to the type of the parameter value, not to the type of the parameter itself. Interfaces, abstract classes and the <see cref="T:System.Object"/> class are
            always resolved dynamically.
            </summary>
            <typeparam name="T">Type of the parameter.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register``1(PostSharp.Patterns.Formatters.IFormatter{``0})">
            <summary>
            Registers the given <paramref name="formatter"/> for the type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register(System.Type,PostSharp.Patterns.Formatters.IFormatter)">
            <summary>
            Registers the given <paramref name="formatter"/> for the given <paramref name="targetType"/>.
            </summary>
            <remarks>The formatter will work for the given target type, and also for any type that inherits/implements the target type.</remarks>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Register(System.Type,System.Type)">
            <summary>
            Registers the given <paramref name="formatterType"/> for the given <paramref name="targetType"/>.
            </summary>
            <remarks>
            <para>Instances of <paramref name="formatterType"/> are going to be created using a parameterless constructor.</para>
            <para>When <paramref name="targetType"/> is generic, the registration applies to its generic instantiations
            (and types that inherit/implement them).</para>
            </remarks>
            <example>
            If you register a formatter as
            <c>FormattingServices.RegisterFormatter(typeof(IDictionary&lt;,&gt;), typeof(MyDictionaryFormatter&lt;,&gt;)</c>
            and then log a parameter of type <c>Dictionary&lt;int, string&gt;</c>, the formatter for that parameter will be created
            by calling <c>new MyDictionaryFormatter&lt;int, string&gt;</c>.
            </example>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Get``1">
            <summary>
            Returns the formatter for the type <typeparamref name="T"/>. 
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Get(System.Type)">
            <summary>
            Returns a formatter for a specific object. This overload should be used when the type of the object
            is not known at build time because the type is non-sealed.
            </summary>
            <param name="objectType">Object type.</param>
            <returns>The formatter the object <paramref name="objectType"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterRepository`1.Reset">
            <summary>
            Clears formatters, but doesn't reset registrations.
            </summary>
            <remarks>Used by unit tests to clear standard formatters.</remarks>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.FormattingRole">
            <summary>
            Base for kind marker types for <see cref="T:PostSharp.Patterns.Formatters.FormatterRepository`1"/>.
            </summary>
            <remarks>
            Types derived from this type are not meant to have members or instances,
            they're used only as markers.
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormattingRole.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.FormattingRole"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.FormattingRole.Name">
            <summary>
            Gets the name of the <see cref="T:PostSharp.Patterns.Formatters.FormattingRole"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.FormattingRole.LoggingRole">
            <summary>
            Gets the logging role name (see <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles"/>).
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.IFormattable">
            <summary>
            Exposes a <see cref="M:PostSharp.Patterns.Formatters.IFormattable.Format(PostSharp.Patterns.Formatters.UnsafeStringBuilder,PostSharp.Patterns.Formatters.FormattingRole)"/> method, which allows an object to format itself into an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            Logging and caching components rely on the <see cref="T:PostSharp.Patterns.Formatters.IFormattable"/> interface.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.IFormattable.Format(PostSharp.Patterns.Formatters.UnsafeStringBuilder,PostSharp.Patterns.Formatters.FormattingRole)">
            <summary>
            Appends a description of the current object to a given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="stringBuilder">The <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> to which the object description should be written.</param>
            <param name="role">An object describing in which context the object is being formatted (e.g. caching or logging).</param>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.IFormatter">
            <summary>
            Appends the description of an object into an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>. Weakly-typed variant of <see cref="T:PostSharp.Patterns.Formatters.IFormatter`1"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.IFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Object)">
            <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> (weakly-typed variant).
            </summary>
            <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.</param>
            <param name="value">The value to be formatted.</param>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.IFormatter.Attributes">
            <summary>
            Gets the formatter attributes.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.IOptionAwareFormatter">
            <summary>
            An interface that implementations of <see cref="T:PostSharp.Patterns.Formatters.IFormattable"/> can optionally implement to support options.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.IOptionAwareFormatter.WithOptions(PostSharp.Patterns.Formatters.FormattingOptions)">
            <summary>
            Returns a copy of the current formatter, but for different options.
            </summary>
            <param name="options">The new options.</param>
            <returns>A copy of the current formatter with the new <paramref name="options"/>.</returns>
            <remarks>
            It is essential for performance that the implementation respects a semi-singleton pattern, i.e. to keep a single instance of the formatter
            for each single distinct value of <see cref="T:PostSharp.Patterns.Formatters.FormattingOptions"/>.
            </remarks> 
        </member>
        <member name="T:PostSharp.Patterns.Formatters.FormatterAttributes">
            <summary>
            Attributes of an <see cref="T:PostSharp.Patterns.Formatters.IFormatter"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.Normal">
            <summary>
            A normal (custom) formatter.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.Dynamic">
            <summary>
            A dynamic formatter, which resolves to another formatter according to the type of the value, not the type of the location.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.Converter">
            <summary>
            A converter.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.FormatterAttributes.Default">
            <summary>
            A default formatter, using <see cref="M:System.Object.ToString"/>.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.FormattingOptions">
            <summary>
            Options that influence the formatting of an object by an <see cref="T:PostSharp.Patterns.Formatters.IOptionAwareFormatter"/>.
            </summary>
            <remarks>
            <para>
            This class can be extended by implementations of custom back-end.
            </para>
            <para>
            It is essential for performance that the implementation respects a semi-singleton pattern, i.e. to keep a single instance of distinct value.
            </para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.FormattingOptions.Default">
            <summary>
            Gets the default <see cref="T:PostSharp.Patterns.Formatters.FormattingOptions"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.FormattingOptions.Unquoted">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Formatters.FormattingOptions"/> indicating that string should not be quoted.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormattingOptions.#ctor(PostSharp.Patterns.Formatters.FormattingOptions)">
            <summary>
            Initializes a new instance of <see cref="T:PostSharp.Patterns.Formatters.FormattingOptions"/> by copying all values from another <see cref="T:PostSharp.Patterns.Formatters.FormattingOptions"/>.
            </summary>
            <param name="prototype">The <see cref="T:PostSharp.Patterns.Formatters.FormattingOptions"/> instance whose values have to be copied.</param>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.FormattingOptions.RequiresUnquotedStrings">
            <summary>
            Gets a value indicating whether the formatters should not use quotation when formatting strings.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.FormatterExtensions">
            <summary>
            Extension methods for the <see cref="T:PostSharp.Patterns.Formatters.IFormatter"/> interface.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterExtensions.WithOptions``1(PostSharp.Patterns.Formatters.IFormatter{``0},PostSharp.Patterns.Formatters.FormattingOptions)">
            <summary>
            Returns a copy of the current formatter, but for different options.
            </summary>
            <param name="formatter">The original formatter.</param>
            <param name="options">The new options.</param>
            <returns>A copy of the current formatter with the new <paramref name="options"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.FormatterExtensions.WithOptions(PostSharp.Patterns.Formatters.IFormatter,PostSharp.Patterns.Formatters.FormattingOptions)">
            <summary>
            Returns a copy of the current formatter, but for different options.
            </summary>
            <param name="formatter">The original formatter.</param>
            <param name="options">The new options.</param>
            <returns>A copy of the current formatter with the new <paramref name="options"/>.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.IFormatter`1">
            <summary>
            Appends the description of an object into an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>. Strongly-typed variant of <see cref="T:PostSharp.Patterns.Formatters.IFormatter"/>.
            </summary>
            <typeparam name="T">Type of values that can be formatted.</typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.IFormatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,`0)">
            <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> (weakly-typed variant).
            </summary>
            <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.</param>
            <param name="value">The value to be formatted.</param>
        </member>
        <member name="T:PostSharp.Patterns.Formatters.Formatter`1">
            <summary>
            Base implementation of the <see cref="T:PostSharp.Patterns.Formatters.IFormatter`1"/> interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.Formatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Object)">
            <inheritdoc />  
        </member>
        <member name="M:PostSharp.Patterns.Formatters.Formatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,`0)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Formatters.Formatter`1.WithOptions(PostSharp.Patterns.Formatters.FormattingOptions)">
            <inheritdoc />
        </member>
        <member name="P:PostSharp.Patterns.Formatters.Formatter`1.Attributes">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.Int16Formatter">
            <summary>
            Efficient formatter for <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.Int16Formatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.Int16Formatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.Int16Formatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Int16)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.Int32Formatter">
            <summary>
            Efficient formatter for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.Int32Formatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.Int32Formatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.Int32Formatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.Int64Formatter">
            <summary>
            Efficient formatter for <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.Int64Formatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.Int64Formatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.Int64Formatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.MethodFormatter">
            <summary>
            A formatter for <see cref="T:System.Reflection.MethodBase"/> values.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.MethodFormatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.MethodFormatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.MethodFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Reflection.MethodBase)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.NullableFormatter`2">
            <summary>
            Formatter for <see cref="T:System.Nullable`1"/>
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.NullableFormatter`2.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Nullable{`1})">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.SByteFormatter">
            <summary>
            Efficient formatter for <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.SByteFormatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.SByteFormatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.SByteFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.SByte)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.StringFormatter">
            <summary>
            A formatter for <see cref="T:System.String"/> values.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.StringFormatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.StringFormatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.StringFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Formatters.StringFormatter.WithOptions(PostSharp.Patterns.Formatters.FormattingOptions)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.TypeFormatter">
            <summary>
            A <see cref="T:PostSharp.Patterns.Formatters.Formatter`1"/> for <see cref="T:System.Type"/> values.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.TypeFormatter.Instance">
            <summary>
            The default instance of <see cref="T:PostSharp.Patterns.Formatters.TypeFormatter"/>, which includes namespaces.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.TypeFormatter.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.TypeFormatter"/> and specifies whether it should include namespaces.
            </summary>
            <param name="includeNamespace"></param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.TypeFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.UInt16Formatter">
            <summary>
            A formatter for <see cref="T:System.UInt16"/> values.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.UInt16Formatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.UInt16Formatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UInt16Formatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.UInt32Formatter">
            <summary>
            A formatter for <see cref="T:System.UInt32"/> values.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.UInt32Formatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.UInt32Formatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UInt32Formatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.UInt64Formatter">
            <summary>
            A formatter for <see cref="T:System.UInt64"/> values.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Formatters.UInt64Formatter.Instance">
            <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Formatters.UInt64Formatter"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UInt64Formatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.UnsafeString">
            <summary>
            A generalized representation of a string that can be either backed by a system <see cref="T:System.String"/>,
            a <c>char[]</c>, or an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>. Conversions between these types happen transparently
            and are cached.
            </summary>
            <remarks>
            <para>Because an <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> can be backed by a <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>, which is a mutable
            type, and is generally pooled and reused for different purposes, 
            it is generally not safe to evaluate an <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> at a different moment than the one designed by
            the API that exposes the <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/>. To make it safe to evaluate the <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> at any
            moment, call the <see cref="M:PostSharp.Patterns.Formatters.UnsafeString.MakeImmutable"/> method, which unbounds the <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> from
            its parent <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeString.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> backed by a <see cref="T:System.String"/>.
            </summary>
            <param name="str">A non-null <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeString.#ctor(System.Char[])">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> backed by an array of <see cref="T:System.Char"/>.
            </summary>
            <param name="array">A non-null array of <see cref="T:System.Char"/>.</param>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeString.Buffer">
            <summary>
            Gets an unmanaged pointer to the string.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeString.IsImmutable">
            <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> is immutable
            or, when the value of this property is <c>false</c>, if still bound to a mutable.
            Call the <see cref="M:PostSharp.Patterns.Formatters.UnsafeString.MakeImmutable"/> method to make the <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> immutable.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeString.Length">
            <summary>
            Gets the number of characters in the string.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeString.MakeImmutable">
            <summary>
            If the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> is bound to its origin <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>,
            evaluates the <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> and breaks the binding, so that later changes in the 
            <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> do not cause changes in the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/>.
            This method also prevents the <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> form being recycled.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeString.ToCharArray">
            <summary>
            Gets an <see cref="T:System.ArraySegment`1"/> representing the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/>.
            </summary>
            <returns>An <see cref="T:System.ArraySegment`1"/> representing the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeString.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder">
            <summary>
            A class similar to <see cref="T:System.Text.StringBuilder"/>, but implemented using unsafe C#.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ThrowOnOverflow">
            <summary>
            <c>true</c> if an <see cref="T:System.OverflowException"/> should be thrown when
            the buffer capacity is insufficient, <c>false</c> if the <c>Append</c> method should return <c>false</c> without exception.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> and allocates a new buffer.
            </summary>
            <param name="capacity">The capacity of the new <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.</param>
            <param name="throwOnOverflow"><c>true</c> if an <see cref="T:System.OverflowException"/> should be thrown when
            the buffer capacity is insufficient, <c>false</c> if the <c>Append</c> method should return <c>false</c> without exception.</param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.#ctor(System.Char*,System.Int32,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> with a pre-allocated buffer/
            </summary>
            <param name="buffer">Pointer to the buffer.</param>
            <param name="size">Number of <c>char</c> in the buffer.</param>
            <param name="throwOnOverflow"><c>true</c> if an <see cref="T:System.OverflowException"/> should be thrown when
            the buffer capacity is insufficient, <c>false</c> if the <c>Append</c> method should return <c>false</c> without exception.</param>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Capacity">
            <summary>
            Gets the capacity (number of <c>char</c>) of the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char)">
            <summary>
            Appends one <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="c">A <c>char</c>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Char)">
            <summary>
            Appends two <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="c1">A <c>char</c>.</param>
            <param name="c2">A <c>char</c>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Char,System.Char)">
            <summary>
            Appends three <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="c1">A <c>char</c>.</param>
            <param name="c2">A <c>char</c>.</param>
            <param name="c3">A <c>char</c>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Appends four <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="c1">A <c>char</c>.</param>
            <param name="c2">A <c>char</c>.</param>
            <param name="c3">A <c>char</c>.</param>
            <param name="c4">A <c>char</c>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Appends five <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="c1">A <c>char</c>.</param>
            <param name="c2">A <c>char</c>.</param>
            <param name="c3">A <c>char</c>.</param>
            <param name="c4">A <c>char</c>.</param>
            <param name="c5">A <c>char</c>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends an array segment of <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="c">A non-null array of <c>char</c>.</param>
            <param name="offset">Index of the first <c>char</c> to be appended.</param>
            <param name="count">Number of <c>char</c> to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char*,System.Int32)">
            <summary>
            Appends an unmanaged array of <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="c">A non-null pointer to an unmanaged array of <c>char</c>.</param>
            <param name="count">Number of <c>char</c> to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char,System.Int32)">
            <summary>
            Appends several times the same <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="c">A <c>char</c>.</param>
            <param name="count">The number of times <paramref name="c"/> has to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Char[])">
            <summary>
            Appends an array of <c>char</c> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="c">A non-null array of <c>char</c>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.String)">
            <summary>
            Appends a <see cref="T:System.String"/> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="str">A non-null <see cref="T:System.String"/>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.String,System.Int32,System.Int32)">
            <summary>
            Appends a part of a <see cref="T:System.String"/> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="str">A non-null <see cref="T:System.String"/></param>
            <param name="startIndex">The index of the first character of the string to append.</param>
            <param name="length">The number of characters to append.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(PostSharp.Patterns.Formatters.CharSpan@)">
            <summary>
            Appends a <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="span">A <see cref="T:PostSharp.Patterns.Formatters.CharSpan"/>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(PostSharp.Patterns.Formatters.UnsafeString)">
            <summary>
            Appends an <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="s">A non-null <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(PostSharp.Patterns.Formatters.UnsafeStringBuilder)">
            <summary>
            Appends the current value of a <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="stringBuilder">A <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Byte)">
            <summary>
            Appends a <see cref="T:System.Byte"/> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="value">The value to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.SByte)">
            <summary>
            Appends an <see cref="T:System.SByte"/> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="value">The value to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.UInt16)">
            <summary>
            Appends a <see cref="T:System.UInt16"/> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="value">The value to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Int16)">
            <summary>
            Appends a <see cref="T:System.Int16"/> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="value">The value to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.UInt32)">
            <summary>
            Appends a <see cref="T:System.UInt32"/> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="value">The value to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Int32)">
            <summary>
            Appends a <see cref="T:System.Int32"/> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="value">The value to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.UInt64)">
            <summary>
            Appends a <see cref="T:System.UInt64"/> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="value">The value to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Int64)">
            <summary>
            Appends a <see cref="T:System.Int64"/> (with decimal formatting) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="value">The value to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Append(System.Boolean)">
            <summary>
            Appends a <see cref="T:System.Boolean"/> (<c>true</c> or <c>false</c>, litterally) to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="value">The value to be appended.</param>
            <returns><c>true</c> in case of success, <c>false</c> in case of buffer overflow.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Clear">
            <summary>
            Clears the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> so it can be reused to build a new string.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32)">
            <summary>
            Returns the substring starting at a given index and ending at the end of the current string.
            </summary>
            <param name="startIndex">Index of the first character of the substring.</param>
            <returns>The substring starting from <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Substring(System.Int32,System.Int32)">
            <summary>
            Returns the substring starting at a given index and having a specified length.
            </summary>
            <param name="startIndex">Index of the first character of the substring.</param>
            <param name="length">Number of characters to return.</param>
            <returns>The substring starting from <paramref name="startIndex"/> having <paramref name="length"/> characters.</returns>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Version">
            <summary>
            Gets the version of the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>. This property is incremented every time
            the current object is reused, more specifically, when the <see cref="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Clear"/> method is called.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.IsDisposed">
            <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> has been disposed.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Length">
            <summary>
            Gets the current number of characters in the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Truncate(System.Int32)">
            <summary>
            Truncates the string to a maximum length.
            </summary>
            <param name="length">The wished length of the string after truncation</param>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Buffer">
            <summary>
            Gets a pointer to the unmanaged buffer of the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ToUnsafeString">
            <summary>
            Gets an <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> that provides read-only access to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <returns>An <see cref="T:PostSharp.Patterns.Formatters.UnsafeString"/> that provides read-only access to the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.SetNullTermination">
            <summary>
            Appends a null character at the end of the current string, without affecting the string length.
            In case of overflow, if <see cref="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ThrowOnOverflow"/> is <c>false</c>, the last character of the string is removed
            and the string length is decreased by 1.
            </summary>
            <returns><c>true</c> if the string was null-terminated without affecting its length, or <c>false</c> if the last character of the string was replaced by the null character
            and the string length was decreased by 1.</returns>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Item(System.Int32)">
            <summary>
            Gets the <c>char</c> at a given position in the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
            <param name="index">Index of the <c>char</c> in the buffer.</param>
            <returns>The <c>char</c> at position <paramref name="index"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Finalize">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool">
            <summary>
            A thread-safe pool of <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.StringBuilderCapacity">
            <summary>
            Gets the maximum number of characters in instances of the <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> class managed by the current pool.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool"/>.
            </summary>
            <param name="stringBuilderCapacity">Maximal number of characters in the <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> in the pool.</param>
            <param name="throwOnOverflow"><c>true</c> if an <see cref="T:System.OverflowException"/> should be thrown when
            the buffer capacity is insufficient, <c>false</c> if the <c>Append</c> method should return <c>false</c> without exception.</param>
            <param name="maxInstances">Maximal number of instances in the pool. The default value is 32.</param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.GetInstance">
            <summary>
            Gets an instance from the pool.
            </summary>
            <returns>An <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.ReturnInstance(PostSharp.Patterns.Formatters.UnsafeStringBuilder)">
            <summary>
            Returns an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> to the pool.
            </summary>
            <param name="stringBuilder">An <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder"/> that has compatible values of the <see cref="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.Capacity"/>
            and <see cref="P:PostSharp.Patterns.Formatters.UnsafeStringBuilder.ThrowOnOverflow"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Formatters.UnsafeStringBuilderPool.Dispose">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Model.ObjectAccessLevel">
            <summary>
            Enumeration of access levels that methods of execution scopes can require on an object.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Unknown">
            <summary>
            The required access level is unknown; maximal access is required.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Read">
            <summary>
            Read-only.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Write">
            <summary>
            Read-write.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.UpgradeableRead">
            <summary>
            Read-only access that prevents other threads from acquiring <see cref="F:PostSharp.Patterns.Model.ObjectAccessLevel.Write"/> or <see cref="F:PostSharp.Patterns.Model.ObjectAccessLevel.UpgradeableRead"/> access.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Unchecked">
            <summary>
            Disables all runtime verification of access permissions.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Yield">
            <summary>
            Indicates that the control flow is passed to another object.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Model.ObjectAccessLevel.Inherit">
            <summary>
            Indicates that the access level is inherited from the outer scope.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Threading.AssumeImmutableAttribute">
            <summary>
            Custom attribute that, when applied to a targetType, means that targetType should be assumed to be immutable.
            The custom attribute can be applied to a type on assembly level by specifying the <see cref="T:System.Type"/> property using
            the <see cref="M:PostSharp.Patterns.Threading.AssumeImmutableAttribute.#ctor(System.Type)"/> constructor.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.AssumeImmutableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.AssumeImmutableAttribute"/> custom attribute that can be applied to a specific targetType.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.AssumeImmutableAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.AssumeImmutableAttribute"/> custom attribute that can be applied to an assembly,
            passing the immutable as a constructor argument. This constructor allows to add assumptions for types that are not defined
            in this current assembly.
            </summary>
            <param name="targetType">The immutable targetType.</param>
        </member>
        <member name="P:PostSharp.Patterns.Threading.AssumeImmutableAttribute.TargetType">
            <summary>
            Gets the targetType that should be assumed immutable, if the <see cref="M:PostSharp.Patterns.Threading.AssumeImmutableAttribute.#ctor(System.Type)"/> constructor was used.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter">
            <summary>
            An awaiter for the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccessAsync(PostSharp.Patterns.Model.ObjectAccessLevel)"/> method. The struct implements both the Awaiter and Awaitable contracts.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.IsCompleted">
            <summary>
            Determines whether the operation has already completed.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.GetAwaiter">
            <summary>
            Gets the Awaiter from the Awaitable. This method is a part of the Awaitable contract.
            </summary>
            <returns>The current object.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.GetResult">
            <summary>
            Gets the result of the async method. This method is a part of the Awaiter contract.
            </summary>
            <returns>The result of the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccessAsync(PostSharp.Patterns.Model.ObjectAccessLevel)"/> method.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.OnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter.UnsafeOnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Threading.ConcurrentAccessToken">
            <summary>
            Token returned by the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccess(PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)"/> method. This token is intended to be used in a <c>using</c> block.
            Consumers of this method must call <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete"/> on success,  and <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Dispose"/> on exception.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.CheckContext(System.Boolean)">
            <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/> is valid in the current context.
            </summary>
            <param name="canBeParentContext"><c>true</c> if the current <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/> can be the token of a parent token,
            <c>false</c> if it must be the token of the current context.</param>
            <returns><c>true</c> if the current <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/> is valid for the current context, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete">
            <summary>
            Indicates that the operation requiring access on an object has successfully completed.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Cancel">
            <summary>
            Indicates that the operation requiring access on an object failed.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Dispose">
            <summary>
            Indicates that the operation requiring access on an object has completed. If the <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete"/> method is
            not invoked before the <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Dispose"/> method, the transaction is considered to have failed. Current threading
            models do not support transactions and therefore this semantic is currently unused, but it may be used in the future.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Threading.ConcurrentAccessToken.Null">
            <summary>
            Gets a null instance of the <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/> type.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Threading.IConcurrencyController">
            <summary>
            Controls access to an entity from possibly several threads.
            </summary>
            <remarks>
            <para>An entity, for the sake of this documentation article, is a group of objects that share the same concurrency controller.</para>
            <para>Objects that are controlled by a concurrency controller implement the <see cref="T:PostSharp.Patterns.Threading.IThreadAware"/> interface.</para>
            </remarks>
        </member>
        <member name="P:PostSharp.Patterns.Threading.IConcurrencyController.IsSharable">
            <summary>
            Determines whether the entity can currently be accessed concurrently by several threads.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Threading.IConcurrencyController.IsReadOnly">
            <summary>
            Determines whether the entity is currently read-only.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccess(PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)">
            <summary>
            Acquires access on the entity for the current thread and waits synchronously if access cannot be immediately acquired.
            </summary>
            <param name="objectAccessLevel">The required access level on the entity.</param>
            <param name="concurrencyAccessToken">An opaque <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/>, typically used in a <c>using</c> block. Consumers must invoke the <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete"/>
            method upon success before exiting the <c>using</c> block.</param>
            <remarks>
            <para>When you are using this method through the expression <c>threadAware.ConcurrentController.AcquireAccess</c>, there may be a race condition during the
            evaluation of the expression. Use the <see cref="M:PostSharp.Patterns.Threading.ThreadAwareExtensions.AcquireAccess(PostSharp.Patterns.Threading.IThreadAware,PostSharp.Patterns.Model.ObjectAccessLevel)"/> extension method to acquire access to a thread-aware object in a thread-safe manner.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccessAsync(PostSharp.Patterns.Model.ObjectAccessLevel)">
            <summary>
            Asynchronously acquires access on the entity for the current thread and returns an async awaiter.
            </summary>
            <param name="objectAccessLevel">The required access level on the entity.</param>
            <returns>a <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter"/> compatible with the <c>await</c> keyword, and evaluating to an opaque <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/> typically used in a <c>using</c> block. 
            Consumers must invoke the <see cref="M:PostSharp.Patterns.Threading.ConcurrentAccessToken.Complete"/>
            method upon success before exiting the <c>using</c> block.
            </returns>
            <remarks>
            <para>When you are using this method through the expression <c>threadAware.ConcurrentController.AcquireAccess</c>, there may be a race condition during the
            evaluation of the expression. Use the <see cref="M:PostSharp.Patterns.Threading.ThreadAwareExtensions.AcquireAccessAsync(PostSharp.Patterns.Threading.IThreadAware,PostSharp.Patterns.Model.ObjectAccessLevel)"/> extension method to acquire access to a thread-aware object in a thread-safe manner.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Threading.IConcurrencyController.CheckAccess(PostSharp.Patterns.Model.ObjectAccessLevel)">
            <summary>
            Determines whether the current thread has a specified level of access to the entity.
            </summary>
            <param name="objectAccessLevel">The required access level on the entity.</param>
            <returns><c>true</c> if the current thread has the required level of access, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Threading.IConcurrencyController.RequireAccess(PostSharp.Patterns.Model.ObjectAccessLevel)">
            <summary>
            Determines whether the current thread has a specified level of access to the entity and throws an exception if not.
            </summary>
            <param name="objectAccessLevel">The required access level on the entity.</param>
        </member>
        <member name="P:PostSharp.Patterns.Threading.IConcurrencyController.ThreadingModel">
            <summary>
            Gets the <see cref="T:PostSharp.Patterns.Threading.ThreadingModel"/> implemented by the current controller.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Threading.IThreadAware">
            <summary>
            Interface implemented by objects that are aware of concurrency. Access to thread-aware objects is controlled by a concurrency controller (<see cref="T:PostSharp.Patterns.Threading.IConcurrencyController"/>).
            Any aspect implementing a threading model (<c>ThreadAwareObjectAttribute</c>) introduces this interface to the target class and ensures that accesses to this class go through
            the controller.
            </summary>
            <remarks>
            <para>
            Thread-aware does not thread-safe. Check the <see cref="P:PostSharp.Patterns.Threading.IConcurrencyController.IsSharable"/> property of <see cref="P:PostSharp.Patterns.Threading.IThreadAware.ConcurrencyController"/> to check
            if the current object can be shared between different threads.
            </para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Threading.IThreadAware.OnParentControllerChanged(PostSharp.Patterns.Threading.IConcurrencyController)">
            <summary>
            Notifies the object that the effective controller of it's parent has changed.
            </summary>
            <param name="parentController">The new parent controller or <c>null</c>.</param>
        </member>
        <member name="P:PostSharp.Patterns.Threading.IThreadAware.ConcurrencyController">
            <summary>
            Gets the concurrency controller for the current object.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Threading.Primitives.AwaitableReaderWriterLock">
            <summary>
            A reader-writer lock implementation that is intended to be simple, yet very
            efficient.  In particular only 1 interlocked operation is taken for any lock 
            operation (we use spin locks to achieve this).  The spin lock is never held
            for more than a few instructions (in particular, we never call event APIs
            or in fact any non-trivial API while holding the spin lock).   
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.Primitives.AwaitableReaderWriterLock.GetThreadRwCount(System.Boolean)">
            <summary>
            This routine retrieves/sets the per-thread counts needed to enforce the
            various rules related to acquiring the lock. 
            
            DontAllocate is set to true if the caller just wants to get an existing
            entry for this thread, but doesn't want to add one if an existing one
            could not be found.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.Primitives.AwaitableReaderWriterLock.LazyCreateEvent(PostSharp.Patterns.Threading.Primitives.AwaitableEvent@,System.Boolean)">
            <summary>
            A routine for lazily creating a event outside the lock (so if errors
            happen they are outside the lock and that we don't do much work
            while holding a spin lock).  If all goes well, reenter the lock and
            set 'waitEvent' 
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.Primitives.AwaitableReaderWriterLock.WaitOnEvent(PostSharp.Patterns.Threading.Primitives.AwaitableEvent,System.Int32,PostSharp.Patterns.Threading.Primitives.AwaitableReaderWriterLock.TimeoutTracker)">
            <summary>
            Waits on 'waitEvent' with a timeout  
            Before the wait 'numWaiters' is incremented and is restored before leaving this routine.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.Primitives.AwaitableReaderWriterLock.WaitOnEventAsyncInitial(PostSharp.Patterns.Threading.Primitives.AwaitableEvent,System.Int32,PostSharp.Patterns.Threading.Primitives.AwaitableReaderWriterLock.TimeoutTracker)">
            <summary>
            Waits on 'waitEvent' with a timeout  
            Before the wait 'numWaiters' is incremented and is restored before leaving this routine.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.Primitives.AwaitableReaderWriterLock.ExitAndWakeUpAppropriateWaiters">
            <summary>
            Determines the appropriate events to set, leaves the locks, and sets the events. 
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Threading.ThreadAwareExtensions">
            <summary>
            Provides extension methods to the <see cref="T:PostSharp.Patterns.Threading.IThreadAware"/> interface.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ThreadAwareExtensions.AcquireAccess(PostSharp.Patterns.Threading.IThreadAware,PostSharp.Patterns.Model.ObjectAccessLevel)">
            <summary>
            Acquires access to given object and returns the <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/>.
            </summary>
            <param name="instance">The instance for which access is required.</param>
            <param name="objectAccessLevel">The level of access required.</param>
            <returns>A <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/> that should be disposed when access is no longer required.</returns>
            <remarks>
            <para>This method is guaranteed to acquire the controller of the <paramref name="instance"/> object. Invoking the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccess(PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)"/>
            method directly does not offer this guarantee, as the controller can be changed between the moment the <see cref="P:PostSharp.Patterns.Threading.IThreadAware.ConcurrencyController"/> property
            is retrieved and the moment the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccess(PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)"/> is invoked.</para>
            </remarks>        
        </member>
        <member name="M:PostSharp.Patterns.Threading.ThreadAwareExtensions.AcquireAccess(PostSharp.Patterns.Threading.IThreadAware,PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)">
            <summary>
            Acquires access for a given object and gets the <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/> as a reference parameter.
            </summary>
            <param name="instance">The instance for which access is required.</param>
            <param name="objectAccessLevel">The level of access required.</param>
            <param name="concurrentAccessToken">At output, a <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessToken"/> that should be disposed when access is no longer required.</param>
            <remarks>
            <para>This method is guaranteed to acquire the controller of the <paramref name="instance"/> object. Invoking the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccess(PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)"/>
            method directly does not offer this guarantee, as the controller can be changed between the moment the <see cref="P:PostSharp.Patterns.Threading.IThreadAware.ConcurrencyController"/> property
            is retrieved and the moment the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccess(PostSharp.Patterns.Model.ObjectAccessLevel,PostSharp.Patterns.Threading.ConcurrentAccessToken@)"/> is invoked.</para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ThreadAwareExtensions.AcquireAccessAsync(PostSharp.Patterns.Threading.IThreadAware,PostSharp.Patterns.Model.ObjectAccessLevel)">
            <summary>
            Asynchronously acquires access for a given object.
            </summary>
            <param name="instance">The instance for which access is required.</param>
            <param name="objectAccessLevel">The level of access required.</param>
            <returns>An <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessAwaiter"/> object that can be used for awaiting for access.</returns>
            <remarks>
            <para>This method is guaranteed to acquire the controller of the <paramref name="instance"/> object. Invoking the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccessAsync(PostSharp.Patterns.Model.ObjectAccessLevel)"/>
            method directly does not offer this guarantee, as the controller can be changed between the moment the <see cref="P:PostSharp.Patterns.Threading.IThreadAware.ConcurrencyController"/> property
            is retrieved and the moment the <see cref="M:PostSharp.Patterns.Threading.IConcurrencyController.AcquireAccessAsync(PostSharp.Patterns.Model.ObjectAccessLevel)"/> is invoked.</para>
            </remarks>
        </member>
        <member name="T:PostSharp.Patterns.Threading.ThreadingException">
            <summary>
            Base class for exceptions thrown by the <c>PostSharp.Patterns.Threading</c> component.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ThreadingException.#ctor">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ThreadingException"/>.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ThreadingException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ThreadingException"/> and sets the exception message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ThreadingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ThreadingException"/>and sets the exception message and the inner exception.
            </summary>
            <param name="message">Message.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ThreadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
        </member>
        <member name="T:PostSharp.Patterns.Threading.ThreadingModel">
            <summary>
            Base class for all threading models. Defines properties that describe the characteristics of threading models. All classes derived from <see cref="T:PostSharp.Patterns.Threading.ThreadingModel"/>
            are necessarily singletons.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Threading.ThreadingModel.IsBlocking">
            <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Threading.ThreadingModel"/> has blocking semantics, i.e. if the threading model may cause the executing thread
            to be blocked, for instance when waiting for a lock.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Threading.ThreadingModel.IsThreadSafe">
            <summary>
            Determines whether the threading model is possibly thread safe.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Threading.ThreadingModel.ToString">
            <inheritdoc />
        </member>
        <member name="T:PostSharp.Patterns.Threading.ThreadingPatternsAspectRoles">
            <summary>
            Enumerates the aspect roles (for use with <see cref="T:PostSharp.Aspects.Dependencies.AspectRoleDependencyAttribute"/>)
             used by the <c>PostSharp.Patterns.Threading</c> component.
            </summary>
        </member>
        <member name="F:PostSharp.Patterns.Threading.ThreadingPatternsAspectRoles.ThreadingModel">
            <summary>
            Role of an aspect that provides a threading model.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Utilities.DateTimeHelper">
            <summary>
            Gives an almost correct value of <c>DateTimeOffset.Now</c>, but much faster. 
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor`1">
            <summary>
            Defines a <see cref="M:PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor`1.Visit``1(System.String,``0,`0@)"/> method invoked by <see cref="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.VisitProperties``1(PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor{``0},``0@)"/>.
            </summary>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor`1.Visit``1(System.String,``0,`0@)">
            <summary>
            The method invoked by <see cref="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.VisitProperties``1(PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor{``0},``0@)"/>.
            </summary>
            <typeparam name="TValue">Type of the property value.</typeparam>
            <param name="name">Property name.</param>
            <param name="value">Property value.</param>
            <param name="state">The opaque state passed to <see cref="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.VisitProperties``1(PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor{``0},``0@)"/>.</param>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor`1.MustVisit(System.String,`0@)">
            <summary>
            Determines if a given property must be visited. If this method returns true, the property is not evaluated.
            </summary>
            <param name="name">Property name.</param>
            <param name="state">The opaque state passed to <see cref="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.VisitProperties``1(PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor{``0},``0@)"/>.</param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Utilities.LocalizedTextProvider">
            <summary>
            Base class for providers of error messages. Implements chain of responsibility between multiple providers.
            </summary>
            <remarks>
            Each chain of providers has it's own base class derived from this one, which contains static field <c>Current</c> that points to current
            provider.
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.LocalizedTextProvider.#ctor(PostSharp.Patterns.Utilities.LocalizedTextProvider)">
            <summary>
            Initializes a new instance of <see cref="T:PostSharp.Patterns.Utilities.LocalizedTextProvider"/> class.
            </summary>
            <param name="next">Next <see cref="T:PostSharp.Patterns.Utilities.LocalizedTextProvider"/> in the responsibility chain.</param>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.LocalizedTextProvider.GetMessage(System.String)">
            <summary>
            Gets a message declared by the <see cref="T:PostSharp.Patterns.Utilities.LocalizedTextProvider"/> or the rest of responsibility chain if applicable.
            </summary>
            <param name="messageId">Identifier of the message.</param>
            <returns>Message represented by <paramref name="messageId"/>.  Returning <c>null</c> is not allowed.
            </returns>
            <remarks>
            <para>An implementation must call the base implementation if it does not provide the requested message.
            The base implementation is responsible to invoke the next provider in the chain of responsibility.
            </para>
            </remarks>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.LocalizedTextProvider.FormatString(System.String,System.Object[])">
            <summary>
            Formats a string. An implementation would typically invoke <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </summary>
            <param name="format">Formatting string. Typically (but not necessarily) the string returned by <see cref="M:PostSharp.Patterns.Utilities.LocalizedTextProvider.GetMessage(System.String)"/>.</param>
            <param name="arguments">Arguments.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Utilities.LocationBindingCollection">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.LocationBindingCollection.GetKeyForItem(PostSharp.Aspects.ILocationBinding)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.ReflectionHelpers.GetFieldsWithAttributeOnFieldOrProperty(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets fields with given attribute type and fields that hold value of property decorated with attribute of given type
            </summary>
            <param name="type">type which fields are to be returned</param>
            <param name="attributeType">type of the attribute</param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Utilities.SerializationHelpers">
            <summary>
            Provide helper methods and properties used in collections serialization logic.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.SerializationHelpers.IsDataContract(System.Type)">
            <summary>
            Checks whether the given type is marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Utilities.ServiceLocator">
            <summary>
            A basic service locator used by PostSharp Patterns to find global services.
            </summary>
        </member>
        <member name="E:PostSharp.Patterns.Utilities.ServiceLocator.ServiceRegistered">
            <summary>
            Event raised when a new service is registered.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.ServiceLocator.RegisterService``1(``0)">
            <summary>
            Registers a service.
            </summary>
            <typeparam name="T">Type of the service interface.</typeparam>
            <param name="service">Service implementation.</param>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.ServiceLocator.GetService``1">
            <summary>
            Gets a service implementation.
            </summary>
            <typeparam name="T">Type of the requested service interface.</typeparam>
            <returns>An implementation of <typeparamref name="T"/>, or <c>null</c> if no such service has been registered.</returns>
        </member>
        <member name="T:PostSharp.Patterns.Utilities.ServiceRegisteredEventArgs">
            <summary>
            Arguments of the <see cref="E:PostSharp.Patterns.Utilities.ServiceLocator.ServiceRegistered"/> event.
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Utilities.ServiceRegisteredEventArgs.ServiceType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the service interface.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.TypeExtensionFactory`1.ShouldOverwrite(System.Type,System.Boolean,System.Type,System.Boolean)">
            <remarks>This logic is supposed to mimic overload resolution in C#.</remarks>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.TypeExtensionFactory`1.HasRoleTypeParameter(System.Type)">
            <summary>
            Checks whether the first type parameter is constrained to be <see cref="T:PostSharp.Patterns.Formatters.FormattingRole"/>.
            </summary>
        </member>
        <member name="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor">
            <summary>
            A convenience wrapper for instances of anonymous types (or any unknown type) that exposes properties.
            </summary>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.GetFactory``1">
            <summary>
            Gets a delegate to a factory method that returns a <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/> for an object of a type given as a generic parameter.
            </summary>
            <typeparam name="T">Type of the objects to be wrapped. It must be the final type (cannot be <c>object</c>, for instance).</typeparam>
            <returns>A delegate that takes the object as input and returns its <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.GetFactory(System.Type)">
            <summary>
            Gets a delegate to a factory method that returns a <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/> for an object of a type given as a generic parameter.
            </summary>
            <param name="type">Type of the objects to be wrapped. It must be the final type (cannot be <c>object</c>, for instance).</param>
            <returns>A delegate that takes the object as input and returns its <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.GetInstance(System.Object)">
            <summary>
            Gets an <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/> for a specific object.
            </summary>
            <param name="value">The wrapped object.</param>
            <returns>A wrapper for <paramref name="value"/>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.TryGetProperty``1(System.String,``0@)">
            <summary>
            Gets the value of a named property for the current <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/>.
            </summary>
            <typeparam name="T">Type of the property value.</typeparam>
            <param name="name">Property name.</param>
            <param name="value">Returns the property value if a property named <paramref name="name"/> exists and its value can be cast to <typeparamref name="T"/>, otherwise <c>default</c>.</param>
            <returns><c>true</c> if the property value if a property named <paramref name="name"/> exists and its value can be cast to <typeparamref name="T"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.TryGetProperty``1(System.Object,System.String,``0@)">
            <summary>
            Gets the value of a named property for an arbitrary object.
            </summary>
            <typeparam name="T">Type of the property value.</typeparam>
            <param name="instance">The object whose property has to be returned.</param>
            <param name="name">Property name.</param>
            <param name="value">Returns the property value if a property named <paramref name="name"/> exists and its value can be cast to <typeparamref name="T"/>, otherwise <c>default</c>.</param>
            <returns><c>true</c> if the property value if a property named <paramref name="name"/> exists and its value can be cast to <typeparamref name="T"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.ToTuples">
            <summary>
            Converts the wrapped object to an array of name-value tuples.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.Equals(PostSharp.Patterns.Utilities.UnknownObjectAccessor)">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.GetEnumerator">
            <summary>
            Returns an <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor.Enumerator"/>, which enumerates properties of the current <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/>
            as a set of <c>KeyValuePair&lt;string, object&gt;</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.VisitProperties``1(PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor{``0},``0@)">
            <summary>
            Invokes the <see cref="M:PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor`1.Visit``1(System.String,``0,`0@)"/> method of a given visitor
            for each property of the current <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/>.
            </summary>
            <typeparam name="TState">The type of the opaque state passed to the  <see cref="M:PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor`1.Visit``1(System.String,``0,`0@)"/>
            method.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="state">The opaque state passed to the  <see cref="M:PostSharp.Patterns.Utilities.IUnknownObjectPropertyVisitor`1.Visit``1(System.String,``0,`0@)"/> method.</param>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.op_Equality(PostSharp.Patterns.Utilities.UnknownObjectAccessor,PostSharp.Patterns.Utilities.UnknownObjectAccessor)">
            <summary>
            Determines if two <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/> are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.op_Inequality(PostSharp.Patterns.Utilities.UnknownObjectAccessor,PostSharp.Patterns.Utilities.UnknownObjectAccessor)">
            <summary>
            Determines if two <see cref="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor"/> are different.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:PostSharp.Patterns.Utilities.UnknownObjectAccessor.Enumerator">
            <summary>
            A value type that implements <c>IEnumerator&lt;KeyValuePair&lt;lt;string, object&gt;gt;</c>
            </summary>
        </member>
        <member name="P:PostSharp.Patterns.Utilities.UnknownObjectAccessor.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:PostSharp.Patterns.Utilities.UnknownObjectAccessor.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:PostSharp.Patterns.Common.Utilities.FieldValueComparer">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(System.Boolean,``0,``0)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Patterns.Common.Utilities.FieldValueComparer.AreEqual``1(``0,``0)">
            <exclude/>
        </member>
        <member name="M:PostSharp.Reflection.ReflectionApiWrapper.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>
            Returns true if the method is backed by an async state machine. This includes async streams.
            </summary>
        </member>
    </members>
</doc>
